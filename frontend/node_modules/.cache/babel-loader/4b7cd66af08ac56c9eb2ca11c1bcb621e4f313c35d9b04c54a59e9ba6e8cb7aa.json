{"ast":null,"code":"var _jsxFileName = \"/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, CircularProgress, Button } from '@mui/material';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend);\nfunction DateFilter({\n  onDateChange\n}) {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const handleDateChange = e => {\n    setSelectedDate(e.target.value);\n    onDateChange(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"datePicker\",\n      children: \"Select Date: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      id: \"datePicker\",\n      value: selectedDate,\n      onChange: handleDateChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 7\n  }, this);\n}\n_s(DateFilter, \"X+343bWD8vGlMCAq1//cBGL6GcI=\");\n_c = DateFilter;\nfunction DeviceAnalytics({\n  deviceId\n}) {\n  _s2();\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({});\n  const [chartType, setChartType] = useState('line'); // 'line', 'bar', 'pie'\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  useEffect(() => {\n    setLoading(true);\n    fetch(`http://localhost:5001/api/devices/${deviceId}`).then(res => res.json()).then(device => {\n      filterData(device);\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Error fetching device data:\", error);\n      setLoading(false);\n    });\n  }, [deviceId, selectedDate]); // React to changes in deviceId and selectedDate\n\n  const filterData = device => {\n    // Convert timestamp to date string for comparison\n    const filteredData = device.data.filter(d => new Date(d.timestamp).toISOString().split('T')[0] === selectedDate);\n\n    // Assuming the data structure includes arrays of waterFlow, pressure, and temperature\n    const labels = filteredData.map(d => new Date(d.timestamp).getHours()); // Use hour from timestamp\n\n    const data = {\n      labels,\n      datasets: [{\n        label: 'Water Flow (L/s)',\n        data: filteredData.map(d => d.waterFlow),\n        borderColor: 'rgb(75, 192, 192)',\n        backgroundColor: 'rgba(75, 192, 192, 0.5)'\n      }, {\n        label: 'Pressure (psi)',\n        data: filteredData.map(d => d.pressure),\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.5)'\n      }, {\n        label: 'Temperature (°C)',\n        data: filteredData.map(d => d.temperature),\n        borderColor: 'rgb(53, 162, 235)',\n        backgroundColor: 'rgba(53, 162, 235, 0.5)'\n      }]\n    };\n    setChartData(data);\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: [\"Device Analytics: \", deviceId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DateFilter, {\n      onDateChange: handleDateChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => setChartType('line'),\n      sx: {\n        mr: 1\n      },\n      children: \"Line Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => setChartType('bar'),\n      sx: {\n        mr: 1\n      },\n      children: \"Bar Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => setChartType('pie'),\n      children: \"Pie Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), chartType === 'line' && /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 32\n    }, this), chartType === 'bar' && /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 31\n    }, this), chartType === 'pie' && /*#__PURE__*/_jsxDEV(Pie, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s2(DeviceAnalytics, \"Z5kApzpnMg/oO4+G+x4hc2Exnp0=\");\n_c2 = DeviceAnalytics;\nexport default DeviceAnalytics;\nvar _c, _c2;\n$RefreshReg$(_c, \"DateFilter\");\n$RefreshReg$(_c2, \"DeviceAnalytics\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","CircularProgress","Button","Line","Bar","Pie","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","DateFilter","onDateChange","_s","selectedDate","setSelectedDate","handleDateChange","e","target","value","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","_c","DeviceAnalytics","deviceId","_s2","loading","setLoading","chartData","setChartData","chartType","setChartType","fetch","then","res","json","device","filterData","catch","error","console","filteredData","data","filter","d","Date","timestamp","toISOString","split","labels","map","getHours","datasets","label","waterFlow","borderColor","backgroundColor","pressure","temperature","date","variant","gutterBottom","onClick","sx","mr","_c2","$RefreshReg$"],"sources":["/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  CircularProgress,\n  Button\n} from '@mui/material';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend);\n\nfunction DateFilter({ onDateChange }) {\n    const [selectedDate, setSelectedDate] = useState(\"\");\n  \n    const handleDateChange = (e) => {\n      setSelectedDate(e.target.value);\n      onDateChange(e.target.value);\n    };\n  \n    return (\n      <div>\n        <label htmlFor=\"datePicker\">Select Date: </label>\n        <input\n          type=\"date\"\n          id=\"datePicker\"\n          value={selectedDate}\n          onChange={handleDateChange}\n        />\n      </div>\n    );\n  }\n\nfunction DeviceAnalytics({ deviceId }) {\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({});\n  const [chartType, setChartType] = useState('line'); // 'line', 'bar', 'pie'\n  const [selectedDate, setSelectedDate] = useState(\"\");\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`http://localhost:5001/api/devices/${deviceId}`)\n      .then(res => res.json())\n      .then(device => {\n        filterData(device);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error(\"Error fetching device data:\", error);\n        setLoading(false);\n      });\n  }, [deviceId, selectedDate]); // React to changes in deviceId and selectedDate\n\n  const filterData = (device) => {\n    // Convert timestamp to date string for comparison\n    const filteredData = device.data.filter(d => \n      new Date(d.timestamp).toISOString().split('T')[0] === selectedDate\n    );\n\n    // Assuming the data structure includes arrays of waterFlow, pressure, and temperature\n    const labels = filteredData.map(d => new Date(d.timestamp).getHours()); // Use hour from timestamp\n\n    const data = {\n      labels,\n      datasets: [\n        {\n          label: 'Water Flow (L/s)',\n          data: filteredData.map(d => d.waterFlow),\n          borderColor: 'rgb(75, 192, 192)',\n          backgroundColor: 'rgba(75, 192, 192, 0.5)',\n        },\n        {\n          label: 'Pressure (psi)',\n          data: filteredData.map(d => d.pressure),\n          borderColor: 'rgb(255, 99, 132)',\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\n        },\n        {\n          label: 'Temperature (°C)',\n          data: filteredData.map(d => d.temperature),\n          borderColor: 'rgb(53, 162, 235)',\n          backgroundColor: 'rgba(53, 162, 235, 0.5)',\n        }\n      ]\n    };\n    setChartData(data);\n  };\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Device Analytics: {deviceId}\n      </Typography>\n\n      {/* Date Filter Component */}\n      <DateFilter onDateChange={handleDateChange} />\n\n      {/* Buttons to switch charts */}\n      <Button variant=\"contained\" onClick={() => setChartType('line')} sx={{ mr: 1 }}>Line Chart</Button>\n      <Button variant=\"contained\" onClick={() => setChartType('bar')} sx={{ mr: 1 }}>Bar Chart</Button>\n      <Button variant=\"contained\" onClick={() => setChartType('pie')}>Pie Chart</Button>\n\n      {/* Conditionally render charts */}\n      {chartType === 'line' && <Line data={chartData} />}\n      {chartType === 'bar' && <Bar data={chartData} />}\n      {chartType === 'pie' && <Pie data={chartData} />}\n    </Box>\n  );\n}\n\nexport default DeviceAnalytics;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,GAAG,EACHC,UAAU,EACVC,gBAAgB,EAChBC,MAAM,QACD,eAAe;AACtB,SAASC,IAAI,EAAEC,GAAG,EAAEC,GAAG,QAAQ,iBAAiB;AAChD,SAASC,KAAK,IAAIC,OAAO,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,UAAU,EAAEC,UAAU,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnJX,OAAO,CAACY,QAAQ,CAACX,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,UAAU,EAAEC,UAAU,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,CAAC;AAEvH,SAASI,UAAUA,CAAC;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAM4B,gBAAgB,GAAIC,CAAC,IAAK;IAC9BF,eAAe,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IAC/BP,YAAY,CAACK,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC9B,CAAC;EAED,oBACEV,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAOY,OAAO,EAAC,YAAY;MAAAD,QAAA,EAAC;IAAa;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACjDhB,OAAA;MACEiB,IAAI,EAAC,MAAM;MACXC,EAAE,EAAC,YAAY;MACfR,KAAK,EAAEL,YAAa;MACpBc,QAAQ,EAAEZ;IAAiB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACZ,EAAA,CAnBMF,UAAU;AAAAkB,EAAA,GAAVlB,UAAU;AAqBnB,SAASmB,eAAeA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACrC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAG9C,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC+C,SAAS,EAAEC,YAAY,CAAC,GAAGhD,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACiD,SAAS,EAAEC,YAAY,CAAC,GAAGlD,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;EACpD,MAAM,CAAC0B,YAAY,EAAEC,eAAe,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd6C,UAAU,CAAC,IAAI,CAAC;IAChBK,KAAK,CAAC,qCAAqCR,QAAQ,EAAE,CAAC,CACnDS,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,MAAM,IAAI;MACdC,UAAU,CAACD,MAAM,CAAC;MAClBT,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDW,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDZ,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,CAACH,QAAQ,EAAEjB,YAAY,CAAC,CAAC,CAAC,CAAC;;EAE9B,MAAM8B,UAAU,GAAID,MAAM,IAAK;IAC7B;IACA,MAAMK,YAAY,GAAGL,MAAM,CAACM,IAAI,CAACC,MAAM,CAACC,CAAC,IACvC,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKzC,YACxD,CAAC;;IAED;IACA,MAAM0C,MAAM,GAAGR,YAAY,CAACS,GAAG,CAACN,CAAC,IAAI,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,CAACK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;IAExE,MAAMT,IAAI,GAAG;MACXO,MAAM;MACNG,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,kBAAkB;QACzBX,IAAI,EAAED,YAAY,CAACS,GAAG,CAACN,CAAC,IAAIA,CAAC,CAACU,SAAS,CAAC;QACxCC,WAAW,EAAE,mBAAmB;QAChCC,eAAe,EAAE;MACnB,CAAC,EACD;QACEH,KAAK,EAAE,gBAAgB;QACvBX,IAAI,EAAED,YAAY,CAACS,GAAG,CAACN,CAAC,IAAIA,CAAC,CAACa,QAAQ,CAAC;QACvCF,WAAW,EAAE,mBAAmB;QAChCC,eAAe,EAAE;MACnB,CAAC,EACD;QACEH,KAAK,EAAE,kBAAkB;QACzBX,IAAI,EAAED,YAAY,CAACS,GAAG,CAACN,CAAC,IAAIA,CAAC,CAACc,WAAW,CAAC;QAC1CH,WAAW,EAAE,mBAAmB;QAChCC,eAAe,EAAE;MACnB,CAAC;IAEL,CAAC;IACD3B,YAAY,CAACa,IAAI,CAAC;EACpB,CAAC;EAED,MAAMjC,gBAAgB,GAAIkD,IAAI,IAAK;IACjCnD,eAAe,CAACmD,IAAI,CAAC;EACvB,CAAC;EAED,IAAIjC,OAAO,EAAE;IACX,oBAAOxB,OAAA,CAACjB,gBAAgB;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC7B;EAEA,oBACEhB,OAAA,CAACnB,GAAG;IAAA8B,QAAA,gBACFX,OAAA,CAAClB,UAAU;MAAC4E,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAhD,QAAA,GAAC,oBAClB,EAACW,QAAQ;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC,eAGbhB,OAAA,CAACE,UAAU;MAACC,YAAY,EAAEI;IAAiB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAG9ChB,OAAA,CAAChB,MAAM;MAAC0E,OAAO,EAAC,WAAW;MAACE,OAAO,EAAEA,CAAA,KAAM/B,YAAY,CAAC,MAAM,CAAE;MAACgC,EAAE,EAAE;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAnD,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnGhB,OAAA,CAAChB,MAAM;MAAC0E,OAAO,EAAC,WAAW;MAACE,OAAO,EAAEA,CAAA,KAAM/B,YAAY,CAAC,KAAK,CAAE;MAACgC,EAAE,EAAE;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAnD,QAAA,EAAC;IAAS;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACjGhB,OAAA,CAAChB,MAAM;MAAC0E,OAAO,EAAC,WAAW;MAACE,OAAO,EAAEA,CAAA,KAAM/B,YAAY,CAAC,KAAK,CAAE;MAAAlB,QAAA,EAAC;IAAS;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAGjFY,SAAS,KAAK,MAAM,iBAAI5B,OAAA,CAACf,IAAI;MAACuD,IAAI,EAAEd;IAAU;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACjDY,SAAS,KAAK,KAAK,iBAAI5B,OAAA,CAACd,GAAG;MAACsD,IAAI,EAAEd;IAAU;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC/CY,SAAS,KAAK,KAAK,iBAAI5B,OAAA,CAACb,GAAG;MAACqD,IAAI,EAAEd;IAAU;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV;AAACO,GAAA,CAnFQF,eAAe;AAAA0C,GAAA,GAAf1C,eAAe;AAqFxB,eAAeA,eAAe;AAAC,IAAAD,EAAA,EAAA2C,GAAA;AAAAC,YAAA,CAAA5C,EAAA;AAAA4C,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}