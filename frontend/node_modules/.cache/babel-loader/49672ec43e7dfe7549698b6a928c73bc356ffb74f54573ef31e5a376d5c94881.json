{"ast":null,"code":"var _jsxFileName = \"/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, CircularProgress, Button } from '@mui/material';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\nfunction DeviceAnalytics({\n  deviceId\n}) {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({});\n  const [isLineChart, setIsLineChart] = useState(true); // Track which chart to display\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(`http://localhost:5001/api/devices/${deviceId}`);\n        const device = await response.json();\n        const labels = device.timestamps || Array.from(new Array(100), (_, index) => index); // Assuming timestamps array is available\n        const waterFlowData = device.waterFlow || [];\n        const pressureData = device.pressure || [];\n        const temperatureData = device.temperature || [];\n        const data = {\n          labels,\n          datasets: [{\n            label: 'Water Flow (L/s)',\n            data: waterFlowData,\n            borderColor: 'rgb(75, 192, 192)',\n            backgroundColor: 'rgba(75, 192, 192, 0.5)'\n          }, {\n            label: 'Pressure (psi)',\n            data: pressureData,\n            borderColor: 'rgb(255, 99, 132)',\n            backgroundColor: 'rgba(255, 99, 132, 0.5)'\n          }, {\n            label: 'Temperature (°C)',\n            data: temperatureData,\n            borderColor: 'rgb(53, 162, 235)',\n            backgroundColor: 'rgba(53, 162, 235, 0.5)'\n          }]\n        };\n        setChartData(data);\n      } catch (error) {\n        console.error(\"Error fetching device data:\", error);\n        // Handle error appropriately\n      }\n      setLoading(false);\n    };\n    fetchData();\n  }, [deviceId]);\n  const toggleChart = () => {\n    setIsLineChart(!isLineChart);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 68\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n  }\n  const barChartData = {\n    labels: chartData.labels,\n    datasets: chartData.datasets.map(dataset => ({\n      ...dataset,\n      backgroundColor: dataset.backgroundColor,\n      borderColor: dataset.borderColor,\n      borderWidth: 1\n    }))\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: [\"Device Analytics: \", deviceId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: toggleChart,\n      children: [\"Toggle to \", isLineChart ? \"Histogram\" : \"Line Chart\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), isLineChart ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Bar, {\n      data: barChartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(DeviceAnalytics, \"9YYqdaT0qtvzMVq23NUsek9e7oQ=\");\n_c = DeviceAnalytics;\nexport default DeviceAnalytics;\nvar _c;\n$RefreshReg$(_c, \"DeviceAnalytics\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","CircularProgress","Button","Line","Bar","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","DeviceAnalytics","deviceId","_s","loading","setLoading","chartData","setChartData","isLineChart","setIsLineChart","fetchData","response","fetch","device","json","labels","timestamps","Array","from","_","index","waterFlowData","waterFlow","pressureData","pressure","temperatureData","temperature","data","datasets","label","borderColor","backgroundColor","error","console","toggleChart","sx","display","justifyContent","children","fileName","_jsxFileName","lineNumber","columnNumber","barChartData","map","dataset","borderWidth","variant","gutterBottom","color","onClick","_c","$RefreshReg$"],"sources":["/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  CircularProgress,\n  Button\n} from '@mui/material';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\n\nfunction DeviceAnalytics({ deviceId }) {\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({});\n  const [isLineChart, setIsLineChart] = useState(true); // Track which chart to display\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(`http://localhost:5001/api/devices/${deviceId}`);\n        const device = await response.json();\n        const labels = device.timestamps || Array.from(new Array(100), (_, index) => index); // Assuming timestamps array is available\n        const waterFlowData = device.waterFlow || [];\n        const pressureData = device.pressure || [];\n        const temperatureData = device.temperature || [];\n        \n        const data = {\n          labels,\n          datasets: [\n            {\n              label: 'Water Flow (L/s)',\n              data: waterFlowData,\n              borderColor: 'rgb(75, 192, 192)',\n              backgroundColor: 'rgba(75, 192, 192, 0.5)',\n            },\n            {\n              label: 'Pressure (psi)',\n              data: pressureData,\n              borderColor: 'rgb(255, 99, 132)',\n              backgroundColor: 'rgba(255, 99, 132, 0.5)',\n            },\n            {\n              label: 'Temperature (°C)',\n              data: temperatureData,\n              borderColor: 'rgb(53, 162, 235)',\n              backgroundColor: 'rgba(53, 162, 235, 0.5)',\n            }\n          ]\n        };\n        \n        setChartData(data);\n      } catch (error) {\n        console.error(\"Error fetching device data:\", error);\n        // Handle error appropriately\n      }\n      setLoading(false);\n    };\n\n    fetchData();\n  }, [deviceId]);\n\n  const toggleChart = () => {\n    setIsLineChart(!isLineChart);\n  };\n\n  if (loading) {\n    return <Box sx={{ display: 'flex', justifyContent: 'center' }}><CircularProgress /></Box>;\n  }\n\n  const barChartData = {\n    labels: chartData.labels,\n    datasets: chartData.datasets.map(dataset => ({\n      ...dataset,\n      backgroundColor: dataset.backgroundColor,\n      borderColor: dataset.borderColor,\n      borderWidth: 1,\n    }))\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Device Analytics: {deviceId}\n      </Typography>\n\n      {/* Button to toggle chart type */}\n      <Button variant=\"contained\" color=\"primary\" onClick={toggleChart}>\n        Toggle to {isLineChart ? \"Histogram\" : \"Line Chart\"}\n      </Button>\n\n      {/* Conditionally render Line Chart or Bar Chart (Histogram) */}\n      {isLineChart ? (\n        <Line data={chartData} />\n      ) : (\n        <Bar data={barChartData} />\n      )}\n    </Box>\n  );\n}\n\nexport default DeviceAnalytics;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}