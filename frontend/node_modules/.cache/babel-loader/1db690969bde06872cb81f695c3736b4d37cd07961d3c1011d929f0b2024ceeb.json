{"ast":null,"code":"var _jsxFileName = \"/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, CircularProgress, Button, Slider } from '@mui/material';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend);\nfunction DeviceAnalytics({\n  deviceId\n}) {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({});\n  const [chartType, setChartType] = useState('line'); // 'line', 'bar', 'pie'\n  const [dataRange, setDataRange] = useState([0, 24]); // Default range for data points\n  const [maxDataPoints, setMaxDataPoints] = useState(100); // Set this to a realistic upper limit based on your data\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`http://localhost:5001/api/devices/${deviceId}`).then(res => res.json()).then(device => {\n      // Calculate the maximum length of the data arrays\n      const maxLength = Math.max(device.waterFlow.length, device.pressure.length, device.temperature.length);\n      setMaxDataPoints(maxLength);\n      setDataRange([0, maxLength]); // Set the initial range based on data length\n      processData(device);\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Error fetching device data:\", error);\n      setLoading(false);\n    });\n  }, [deviceId]);\n  const processData = device => {\n    const labels = device.timestamps.slice(dataRange[0], dataRange[1]);\n    const waterFlowData = device.waterFlow.slice(dataRange[0], dataRange[1]);\n    const pressureData = device.pressure.slice(dataRange[0], dataRange[1]);\n    const temperatureData = device.temperature.slice(dataRange[0], dataRange[1]);\n    const data = {\n      labels,\n      datasets: [{\n        label: 'Water Flow (L/s)',\n        data: waterFlowData,\n        borderColor: 'rgb(75, 192, 192)',\n        backgroundColor: 'rgba(75, 192, 192, 0.5)'\n      }, {\n        label: 'Pressure (psi)',\n        data: pressureData,\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.5)'\n      }, {\n        label: 'Temperature (°C)',\n        data: temperatureData,\n        borderColor: 'rgb(53, 162, 235)',\n        backgroundColor: 'rgba(53, 162, 235, 0.5)'\n      }]\n    };\n    setChartData(data);\n  };\n  const handleRangeChange = (event, newValue) => {\n    setDataRange(newValue);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: [\"Device Analytics: \", deviceId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      gutterBottom: true,\n      children: \"Adjust data range:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      value: dataRange,\n      onChange: handleRangeChange,\n      valueLabelDisplay: \"auto\",\n      min: 0,\n      max: maxDataPoints - 1,\n      marks: true,\n      step: 1,\n      disableSwap: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => setChartType('line'),\n      sx: {\n        mr: 1\n      },\n      children: \"Line Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => setChartType('bar'),\n      sx: {\n        mr: 1\n      },\n      children: \"Bar Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => setChartType('pie'),\n      children: \"Pie Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), chartType === 'line' && /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 32\n    }, this), chartType === 'bar' && /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 31\n    }, this), chartType === 'pie' && /*#__PURE__*/_jsxDEV(Pie, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(DeviceAnalytics, \"ZaEt7EATv7uMU0G5NuzxiTQiW+Y=\");\n_c = DeviceAnalytics;\nexport default DeviceAnalytics;\nvar _c;\n$RefreshReg$(_c, \"DeviceAnalytics\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","CircularProgress","Button","Slider","Line","Bar","Pie","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","DeviceAnalytics","deviceId","_s","loading","setLoading","chartData","setChartData","chartType","setChartType","dataRange","setDataRange","maxDataPoints","setMaxDataPoints","fetch","then","res","json","device","maxLength","Math","max","waterFlow","length","pressure","temperature","processData","catch","error","console","labels","timestamps","slice","waterFlowData","pressureData","temperatureData","data","datasets","label","borderColor","backgroundColor","handleRangeChange","event","newValue","fileName","_jsxFileName","lineNumber","columnNumber","children","variant","gutterBottom","value","onChange","valueLabelDisplay","min","marks","step","disableSwap","onClick","sx","mr","_c","$RefreshReg$"],"sources":["/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  CircularProgress,\n  Button,\n  Slider\n} from '@mui/material';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend);\n\nfunction DeviceAnalytics({ deviceId }) {\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({});\n  const [chartType, setChartType] = useState('line'); // 'line', 'bar', 'pie'\n  const [dataRange, setDataRange] = useState([0, 24]); // Default range for data points\n  const [maxDataPoints, setMaxDataPoints] = useState(100); // Set this to a realistic upper limit based on your data\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`http://localhost:5001/api/devices/${deviceId}`)\n      .then(res => res.json())\n      .then(device => {\n        // Calculate the maximum length of the data arrays\n        const maxLength = Math.max(\n          device.waterFlow.length,\n          device.pressure.length,\n          device.temperature.length\n        );\n        setMaxDataPoints(maxLength);\n        setDataRange([0, maxLength]); // Set the initial range based on data length\n        processData(device);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error(\"Error fetching device data:\", error);\n        setLoading(false);\n      });\n  }, [deviceId]);\n\n  const processData = (device) => {\n    const labels = device.timestamps.slice(dataRange[0], dataRange[1]);\n    const waterFlowData = device.waterFlow.slice(dataRange[0], dataRange[1]);\n    const pressureData = device.pressure.slice(dataRange[0], dataRange[1]);\n    const temperatureData = device.temperature.slice(dataRange[0], dataRange[1]);\n\n    const data = {\n      labels,\n      datasets: [\n        {\n          label: 'Water Flow (L/s)',\n          data: waterFlowData,\n          borderColor: 'rgb(75, 192, 192)',\n          backgroundColor: 'rgba(75, 192, 192, 0.5)',\n        },\n        {\n          label: 'Pressure (psi)',\n          data: pressureData,\n          borderColor: 'rgb(255, 99, 132)',\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\n        },\n        {\n          label: 'Temperature (°C)',\n          data: temperatureData,\n          borderColor: 'rgb(53, 162, 235)',\n          backgroundColor: 'rgba(53, 162, 235, 0.5)',\n        }\n      ]\n    };\n    setChartData(data);\n  };\n\n  const handleRangeChange = (event, newValue) => {\n    setDataRange(newValue);\n  };\n\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Device Analytics: {deviceId}\n      </Typography>\n\n      {/* Slider for selecting the range of data points */}\n      <Typography gutterBottom>Adjust data range:</Typography>\n      <Slider\n        value={dataRange}\n        onChange={handleRangeChange}\n        valueLabelDisplay=\"auto\"\n        min={0}\n        max={maxDataPoints - 1}\n        marks\n        step={1}\n        disableSwap\n      />\n\n      {/* Buttons to switch chart types */}\n      <Button variant=\"contained\" onClick={() => setChartType('line')} sx={{ mr: 1 }}>Line Chart</Button>\n      <Button variant=\"contained\" onClick={() => setChartType('bar')} sx={{ mr: 1 }}>Bar Chart</Button>\n      <Button variant=\"contained\" onClick={() => setChartType('pie')}>Pie Chart</Button>\n\n      {/* Conditionally render charts */}\n      {chartType === 'line' && <Line data={chartData} />}\n      {chartType === 'bar' && <Bar data={chartData} />}\n      {chartType === 'pie' && <Pie data={chartData} />}\n    </Box>\n  );\n}\n\nexport default DeviceAnalytics;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}