{"ast":null,"code":"var _jsxFileName = \"/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction DeviceAnalytics({\n  deviceId\n}) {\n  _s();\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(`http://localhost:5001/api/devices/${deviceId}`);\n      const deviceData = await response.json();\n      setData({\n        labels: deviceData.timestamps,\n        // Assume timestamps are stored or generate them dynamically\n        datasets: [{\n          label: 'Water Flow',\n          data: deviceData.waterFlow,\n          borderColor: 'rgba(75, 192, 192, 1)',\n          backgroundColor: 'rgba(75, 192, 192, 0.5)'\n        }, {\n          label: 'Pressure',\n          data: deviceData.pressure,\n          borderColor: 'rgba(255, 99, 132, 1)',\n          backgroundColor: 'rgba(255, 99, 132, 0.5)'\n        }, {\n          label: 'Temperature',\n          data: deviceData.temperature,\n          borderColor: 'rgba(53, 162, 235, 1)',\n          backgroundColor: 'rgba(53, 162, 235, 0.5)'\n        }]\n      });\n    };\n    fetchData();\n  }, [deviceId]);\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(DeviceAnalytics, \"tNVKLF/eI269iIOS4WygXQde5D8=\");\n_c = DeviceAnalytics;\nexport default DeviceAnalytics;\nvar _c;\n$RefreshReg$(_c, \"DeviceAnalytics\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","DeviceAnalytics","deviceId","_s","data","setData","fetchData","response","fetch","deviceData","json","labels","timestamps","datasets","label","waterFlow","borderColor","backgroundColor","pressure","temperature","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nfunction DeviceAnalytics({ deviceId }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(`http://localhost:5001/api/devices/${deviceId}`);\n      const deviceData = await response.json();\n      setData({\n        labels: deviceData.timestamps, // Assume timestamps are stored or generate them dynamically\n        datasets: [\n          {\n            label: 'Water Flow',\n            data: deviceData.waterFlow,\n            borderColor: 'rgba(75, 192, 192, 1)',\n            backgroundColor: 'rgba(75, 192, 192, 0.5)',\n          },\n          {\n            label: 'Pressure',\n            data: deviceData.pressure,\n            borderColor: 'rgba(255, 99, 132, 1)',\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\n          },\n          {\n            label: 'Temperature',\n            data: deviceData.temperature,\n            borderColor: 'rgba(53, 162, 235, 1)',\n            backgroundColor: 'rgba(53, 162, 235, 0.5)',\n          },\n        ],\n      });\n    };\n\n    fetchData();\n  }, [deviceId]);\n\n  return (\n    <Line data={data} />\n  );\n}\n\nexport default DeviceAnalytics;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,IAAIC,OAAO,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3HT,OAAO,CAACU,QAAQ,CAACT,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,CAAC;AAE/F,SAASI,eAAeA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACrC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd,MAAMoB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqCN,QAAQ,EAAE,CAAC;MAC7E,MAAMO,UAAU,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACxCL,OAAO,CAAC;QACNM,MAAM,EAAEF,UAAU,CAACG,UAAU;QAAE;QAC/BC,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,YAAY;UACnBV,IAAI,EAAEK,UAAU,CAACM,SAAS;UAC1BC,WAAW,EAAE,uBAAuB;UACpCC,eAAe,EAAE;QACnB,CAAC,EACD;UACEH,KAAK,EAAE,UAAU;UACjBV,IAAI,EAAEK,UAAU,CAACS,QAAQ;UACzBF,WAAW,EAAE,uBAAuB;UACpCC,eAAe,EAAE;QACnB,CAAC,EACD;UACEH,KAAK,EAAE,aAAa;UACpBV,IAAI,EAAEK,UAAU,CAACU,WAAW;UAC5BH,WAAW,EAAE,uBAAuB;UACpCC,eAAe,EAAE;QACnB,CAAC;MAEL,CAAC,CAAC;IACJ,CAAC;IAEDX,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,oBACEH,OAAA,CAACX,IAAI;IAACgB,IAAI,EAAEA;EAAK;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAExB;AAACpB,EAAA,CAtCQF,eAAe;AAAAuB,EAAA,GAAfvB,eAAe;AAwCxB,eAAeA,eAAe;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}