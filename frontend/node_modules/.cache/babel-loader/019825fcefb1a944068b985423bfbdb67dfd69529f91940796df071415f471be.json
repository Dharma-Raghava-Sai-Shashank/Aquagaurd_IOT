{"ast":null,"code":"var _jsxFileName = \"/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, CircularProgress, Button } from '@mui/material';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport DateFilter from './DateFilter'; // Assuming DateFilter is in the same directory\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend);\nfunction DeviceAnalytics({\n  deviceId\n}) {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({});\n  const [chartType, setChartType] = useState('line'); // 'line', 'bar', 'pie'\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  useEffect(() => {\n    setLoading(true);\n    fetch(`http://localhost:5001/api/devices/${deviceId}`).then(res => res.json()).then(device => {\n      filterData(device);\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Error fetching device data:\", error);\n      setLoading(false);\n    });\n  }, [deviceId, selectedDate]); // React to changes in deviceId and selectedDate\n\n  const filterData = device => {\n    // Convert timestamp to date string for comparison\n    const filteredData = device.data.filter(d => new Date(d.timestamp).toISOString().split('T')[0] === selectedDate);\n\n    // Assuming the data structure includes arrays of waterFlow, pressure, and temperature\n    const labels = filteredData.map(d => new Date(d.timestamp).getHours()); // Use hour from timestamp\n\n    const data = {\n      labels,\n      datasets: [{\n        label: 'Water Flow (L/s)',\n        data: filteredData.map(d => d.waterFlow),\n        borderColor: 'rgb(75, 192, 192)',\n        backgroundColor: 'rgba(75, 192, 192, 0.5)'\n      }, {\n        label: 'Pressure (psi)',\n        data: filteredData.map(d => d.pressure),\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.5)'\n      }, {\n        label: 'Temperature (°C)',\n        data: filteredData.map(d => d.temperature),\n        borderColor: 'rgb(53, 162, 235)',\n        backgroundColor: 'rgba(53, 162, 235, 0.5)'\n      }]\n    };\n    setChartData(data);\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: [\"Device Analytics: \", deviceId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DateFilter, {\n      onDateChange: handleDateChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => setChartType('line'),\n      sx: {\n        mr: 1\n      },\n      children: \"Line Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => setChartType('bar'),\n      sx: {\n        mr: 1\n      },\n      children: \"Bar Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => setChartType('pie'),\n      children: \"Pie Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), chartType === 'line' && /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 32\n    }, this), chartType === 'bar' && /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 31\n    }, this), chartType === 'pie' && /*#__PURE__*/_jsxDEV(Pie, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(DeviceAnalytics, \"Z5kApzpnMg/oO4+G+x4hc2Exnp0=\");\n_c = DeviceAnalytics;\nexport default DeviceAnalytics;\nvar _c;\n$RefreshReg$(_c, \"DeviceAnalytics\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","CircularProgress","Button","Line","Bar","Pie","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","DateFilter","jsxDEV","_jsxDEV","register","DeviceAnalytics","deviceId","_s","loading","setLoading","chartData","setChartData","chartType","setChartType","selectedDate","setSelectedDate","fetch","then","res","json","device","filterData","catch","error","console","filteredData","data","filter","d","Date","timestamp","toISOString","split","labels","map","getHours","datasets","label","waterFlow","borderColor","backgroundColor","pressure","temperature","handleDateChange","date","fileName","_jsxFileName","lineNumber","columnNumber","children","variant","gutterBottom","onDateChange","onClick","sx","mr","_c","$RefreshReg$"],"sources":["/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  CircularProgress,\n  Button\n} from '@mui/material';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport DateFilter from './DateFilter';  // Assuming DateFilter is in the same directory\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend);\n\nfunction DeviceAnalytics({ deviceId }) {\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({});\n  const [chartType, setChartType] = useState('line'); // 'line', 'bar', 'pie'\n  const [selectedDate, setSelectedDate] = useState(\"\");\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`http://localhost:5001/api/devices/${deviceId}`)\n      .then(res => res.json())\n      .then(device => {\n        filterData(device);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error(\"Error fetching device data:\", error);\n        setLoading(false);\n      });\n  }, [deviceId, selectedDate]); // React to changes in deviceId and selectedDate\n\n  const filterData = (device) => {\n    // Convert timestamp to date string for comparison\n    const filteredData = device.data.filter(d => \n      new Date(d.timestamp).toISOString().split('T')[0] === selectedDate\n    );\n\n    // Assuming the data structure includes arrays of waterFlow, pressure, and temperature\n    const labels = filteredData.map(d => new Date(d.timestamp).getHours()); // Use hour from timestamp\n\n    const data = {\n      labels,\n      datasets: [\n        {\n          label: 'Water Flow (L/s)',\n          data: filteredData.map(d => d.waterFlow),\n          borderColor: 'rgb(75, 192, 192)',\n          backgroundColor: 'rgba(75, 192, 192, 0.5)',\n        },\n        {\n          label: 'Pressure (psi)',\n          data: filteredData.map(d => d.pressure),\n          borderColor: 'rgb(255, 99, 132)',\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\n        },\n        {\n          label: 'Temperature (°C)',\n          data: filteredData.map(d => d.temperature),\n          borderColor: 'rgb(53, 162, 235)',\n          backgroundColor: 'rgba(53, 162, 235, 0.5)',\n        }\n      ]\n    };\n    setChartData(data);\n  };\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Device Analytics: {deviceId}\n      </Typography>\n\n      {/* Date Filter Component */}\n      <DateFilter onDateChange={handleDateChange} />\n\n      {/* Buttons to switch charts */}\n      <Button variant=\"contained\" onClick={() => setChartType('line')} sx={{ mr: 1 }}>Line Chart</Button>\n      <Button variant=\"contained\" onClick={() => setChartType('bar')} sx={{ mr: 1 }}>Bar Chart</Button>\n      <Button variant=\"contained\" onClick={() => setChartType('pie')}>Pie Chart</Button>\n\n      {/* Conditionally render charts */}\n      {chartType === 'line' && <Line data={chartData} />}\n      {chartType === 'bar' && <Bar data={chartData} />}\n      {chartType === 'pie' && <Pie data={chartData} />}\n    </Box>\n  );\n}\n\nexport default DeviceAnalytics;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}