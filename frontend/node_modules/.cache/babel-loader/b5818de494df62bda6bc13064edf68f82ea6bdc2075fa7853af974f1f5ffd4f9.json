{"ast":null,"code":"var _jsxFileName = \"/Users/shashank/Downloads/Reddy/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Container, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Dialog, DialogTitle, DialogContent, DialogActions, Button, Slider, Box, TextField, Stack } from '@mui/material';\nimport DeviceAnalytics from './DeviceAnalytics';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Devices fetched from the DB on mount\n  const [devices, setDevices] = useState([]);\n\n  // Dialog to edit sensor data\n  const [openDialog, setOpenDialog] = useState(false);\n  const [selectedDeviceIndex, setSelectedDeviceIndex] = useState(null);\n\n  // Dialog to add a new device\n  const [openAddDialog, setOpenAddDialog] = useState(false);\n\n  // The new device being typed in the form\n  const [newDevice, setNewDevice] = useState({\n    Did: '',\n    waterFlow: 0,\n    pressure: 0,\n    temperature: 0\n  });\n\n  /**\n   * 1) Fetch from DB on first render\n   */\n  useEffect(() => {\n    fetch('http://localhost:5001/api/devices').then(res => res.json()).then(data => setDevices(data)).catch(err => console.error('Error fetching devices:', err));\n  }, []);\n\n  /**\n   * 2) Random update effect (every second)\n   *    Remove or modify if not needed.\n   */\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDevices(prevDevices => {\n        // 1) Generate updated sensor data for each device\n        const updatedDevices = prevDevices.map(device => ({\n          ...device,\n          waterFlow: Math.abs(parseFloat((device.waterFlow + (Math.random() * 2 - 1)).toFixed(2))),\n          pressure: Math.abs(parseFloat((device.pressure + (Math.random() * 2 - 1)).toFixed(2))),\n          temperature: Math.abs(parseFloat((device.temperature + (Math.random() * 2 - 1)).toFixed(2)))\n        }));\n\n        // 2) Post updated data to the server endpoint\n        fetch('http://localhost:5001/api/devices/bulk', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatedDevices)\n        }).then(res => res.json()).then(data => {\n          console.log('Bulk update response:', data);\n        }).catch(error => console.error('Error posting updated devices:', error));\n\n        // 3) Return the updated array to setDevices\n        return updatedDevices;\n      });\n    }, 2000);\n\n    // Cleanup the interval on component unmount\n    return () => clearInterval(interval);\n  }, [devices]);\n\n  // --------------------------\n  // Sensor-editing dialog\n  // --------------------------\n  const handleRowClick = index => {\n    setSelectedDeviceIndex(index);\n    setOpenDialog(true);\n  };\n  const handleDialogClose = () => {\n    setOpenDialog(false);\n  };\n\n  // Slider changes for the selected device\n  const handleSliderChange = (field, newValue) => {\n    setDevices(prevDevices => {\n      const updated = [...prevDevices];\n      updated[selectedDeviceIndex] = {\n        ...updated[selectedDeviceIndex],\n        [field]: newValue\n      };\n      return updated;\n    });\n  };\n  const selectedDevice = selectedDeviceIndex !== null ? devices[selectedDeviceIndex] : null;\n\n  // --------------------------\n  // \"Add Device\" dialog\n  // --------------------------\n  const handleOpenAddDialog = () => {\n    setNewDevice({\n      Did: '',\n      waterFlow: 0,\n      pressure: 0,\n      temperature: 0\n    });\n    setOpenAddDialog(true);\n  };\n  const handleCloseAddDialog = () => {\n    setOpenAddDialog(false);\n  };\n\n  // Function to add a new device\n  const handleAddDevice = () => {\n    // Check if all required fields are filled (assuming Did is necessary to create a new entry)\n    if (!newDevice.Did) {\n      alert(\"Please fill in all required fields.\");\n      return;\n    }\n    fetch('http://localhost:5001/api/devices', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newDevice)\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      console.log('Add device response:', data);\n      setDevices([...devices, newDevice]); // Assuming the server returns the created device\n      handleCloseAddDialog(); // Close the dialog upon successful addition\n    }).catch(error => {\n      console.error('Error adding new device:', error);\n      alert('Failed to add device: ' + error.message); // Optionally alert the user\n    });\n  };\n\n  /**\n   * Called whenever any field in newDevice changes.\n   * 1) Update local `newDevice`.\n   * 2) Immediately POST to the server (creating or re-creating).\n   *    - In reality, you might want to do a \"PUT / upsert\" or add a debounce.\n   */\n  const handleNewDeviceFieldChange = (field, value) => {\n    setNewDevice(prev => {\n      const updated = {\n        ...prev,\n        [field]: value\n      };\n\n      // We only attempt to POST if Did and location are not empty\n      // (to avoid sending incomplete data for every single keystroke).\n      // You can remove or adjust this condition if desired.\n      if (updated.Did) {\n        fetch('http://localhost:5001/api/devices', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updated)\n        }).then(res => res.json()).then(data => {\n          console.log('Dynamic DB update response:', data);\n        }).catch(err => console.error('Error dynamically creating device:', err));\n      }\n      return updated;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    sx: {\n      marginTop: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Water Management System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      sx: {\n        mb: 2\n      },\n      onClick: handleOpenAddDialog,\n      children: \"Add Device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Device ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 26\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Water Flow (L/s)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 26\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Pressure (psi)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 26\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Temperature (\\xB0C)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 26\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: devices.map((device, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n            hover: true,\n            style: {\n              cursor: 'pointer'\n            },\n            onClick: () => handleRowClick(index),\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: device.Did\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: device.waterFlow\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: device.pressure\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: device.temperature\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this)]\n          }, device.Did, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: handleDialogClose,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Adjust Sensor Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        dividers: true,\n        children: selectedDevice && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              children: \"Water Flow (L/s)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Slider, {\n              value: selectedDevice.waterFlow,\n              min: 0,\n              max: 500,\n              step: 1,\n              onChange: (e, val) => handleSliderChange('waterFlow', val)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [\"Current: \", selectedDevice.waterFlow.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 4\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              children: \"Pressure (psi)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Slider, {\n              value: selectedDevice.pressure,\n              min: 0,\n              max: 150,\n              step: 1,\n              onChange: (e, val) => handleSliderChange('pressure', val)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [\"Current: \", selectedDevice.pressure.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 4\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              children: \"Temperature (\\xB0C)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Slider, {\n              value: selectedDevice.temperature,\n              min: 0,\n              max: 100,\n              step: 1,\n              onChange: (e, val) => handleSliderChange('temperature', val)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [\"Current: \", selectedDevice.temperature.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleDialogClose,\n          variant: \"contained\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openAddDialog,\n      onClose: handleCloseAddDialog,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Add New Device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        dividers: true,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 2,\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Device ID\",\n            value: newDevice.Did,\n            onChange: e => handleNewDeviceFieldChange('Did', e.target.value),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Water Flow (L/s)\",\n            type: \"number\",\n            value: newDevice.waterFlow,\n            onChange: e => handleNewDeviceFieldChange('waterFlow', parseFloat(e.target.value) || 0),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Pressure (psi)\",\n            type: \"number\",\n            value: newDevice.pressure,\n            onChange: e => handleNewDeviceFieldChange('pressure', parseFloat(e.target.value) || 0),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Temperature (\\xB0C)\",\n            type: \"number\",\n            value: newDevice.temperature,\n            onChange: e => handleNewDeviceFieldChange('temperature', parseFloat(e.target.value) || 0),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseAddDialog,\n          variant: \"outlined\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleAddDevice,\n          variant: \"contained\",\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeviceAnalytics, {\n      deviceId: \"device1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LeO2tV+8sFEavOSDmnjA470qhoA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Container","Typography","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Dialog","DialogTitle","DialogContent","DialogActions","Button","Slider","Box","TextField","Stack","DeviceAnalytics","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","devices","setDevices","openDialog","setOpenDialog","selectedDeviceIndex","setSelectedDeviceIndex","openAddDialog","setOpenAddDialog","newDevice","setNewDevice","Did","waterFlow","pressure","temperature","fetch","then","res","json","data","catch","err","console","error","interval","setInterval","prevDevices","updatedDevices","map","device","Math","abs","parseFloat","random","toFixed","method","headers","body","JSON","stringify","log","clearInterval","handleRowClick","index","handleDialogClose","handleSliderChange","field","newValue","updated","selectedDevice","handleOpenAddDialog","handleCloseAddDialog","handleAddDevice","alert","response","message","handleNewDeviceFieldChange","value","prev","maxWidth","sx","marginTop","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","mb","onClick","component","hover","style","cursor","open","onClose","fullWidth","dividers","mt","min","max","step","onChange","e","val","spacing","label","target","type","deviceId","_c","$RefreshReg$"],"sources":["/Users/shashank/Downloads/Reddy/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Container,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Slider,\n  Box,\n  TextField,\n  Stack\n} from '@mui/material';\nimport DeviceAnalytics from './DeviceAnalytics';\n\nfunction App() {\n  // Devices fetched from the DB on mount\n  const [devices, setDevices] = useState([]);\n\n  // Dialog to edit sensor data\n  const [openDialog, setOpenDialog] = useState(false);\n  const [selectedDeviceIndex, setSelectedDeviceIndex] = useState(null);\n\n  // Dialog to add a new device\n  const [openAddDialog, setOpenAddDialog] = useState(false);\n\n  // The new device being typed in the form\n  const [newDevice, setNewDevice] = useState({\n    Did: '',\n    waterFlow: 0,\n    pressure: 0,\n    temperature: 0,\n  });\n\n  /**\n   * 1) Fetch from DB on first render\n   */\n  useEffect(() => {\n    fetch('http://localhost:5001/api/devices')\n      .then((res) => res.json())\n      .then((data) => setDevices(data))\n      .catch((err) => console.error('Error fetching devices:', err));\n  }, []);\n\n  /**\n   * 2) Random update effect (every second)\n   *    Remove or modify if not needed.\n   */\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDevices((prevDevices) => {\n        // 1) Generate updated sensor data for each device\n        const updatedDevices = prevDevices.map((device) => ({\n          ...device,\n          waterFlow: Math.abs(parseFloat((device.waterFlow + (Math.random() * 2 - 1)).toFixed(2))),\n          pressure: Math.abs(parseFloat((device.pressure + (Math.random() * 2 - 1)).toFixed(2))),\n          temperature: Math.abs(parseFloat((device.temperature + (Math.random() * 2 - 1)).toFixed(2)))\n      }));\n\n        // 2) Post updated data to the server endpoint\n        fetch('http://localhost:5001/api/devices/bulk', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(updatedDevices),\n        })\n          .then((res) => res.json())\n          .then((data) => {\n            console.log('Bulk update response:', data);\n          })\n          .catch((error) => console.error('Error posting updated devices:', error));\n  \n        // 3) Return the updated array to setDevices\n        return updatedDevices;\n      });\n    }, 2000);\n  \n    // Cleanup the interval on component unmount\n    return () => clearInterval(interval);\n  }, [devices]);\n  \n  // --------------------------\n  // Sensor-editing dialog\n  // --------------------------\n  const handleRowClick = (index) => {\n    setSelectedDeviceIndex(index);\n    setOpenDialog(true);\n  };\n\n  const handleDialogClose = () => {\n    setOpenDialog(false);\n  };\n\n  // Slider changes for the selected device\n  const handleSliderChange = (field, newValue) => {\n    setDevices((prevDevices) => {\n      const updated = [...prevDevices];\n      updated[selectedDeviceIndex] = {\n        ...updated[selectedDeviceIndex],\n        [field]: newValue,\n      };\n      return updated;\n    });\n  };\n\n  const selectedDevice =\n    selectedDeviceIndex !== null ? devices[selectedDeviceIndex] : null;\n\n  // --------------------------\n  // \"Add Device\" dialog\n  // --------------------------\n  const handleOpenAddDialog = () => {\n    setNewDevice({\n      Did: '',\n      waterFlow: 0,\n      pressure: 0,\n      temperature: 0,\n    });\n    setOpenAddDialog(true);\n  };\n\n  const handleCloseAddDialog = () => {\n    setOpenAddDialog(false);\n  };\n\n  // Function to add a new device\nconst handleAddDevice = () => {\n  // Check if all required fields are filled (assuming Did is necessary to create a new entry)\n  if (!newDevice.Did) {\n    alert(\"Please fill in all required fields.\");\n    return;\n  }\n\n  fetch('http://localhost:5001/api/devices', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(newDevice),\n  })\n  .then((response) => {\n    return response.json();\n  })\n  .then((data) => {\n    console.log('Add device response:', data);\n    setDevices([...devices, newDevice]);  // Assuming the server returns the created device\n    handleCloseAddDialog();  // Close the dialog upon successful addition\n  })\n  .catch((error) => {\n    console.error('Error adding new device:', error);\n    alert('Failed to add device: ' + error.message); // Optionally alert the user\n  });\n};\n\n\n  /**\n   * Called whenever any field in newDevice changes.\n   * 1) Update local `newDevice`.\n   * 2) Immediately POST to the server (creating or re-creating).\n   *    - In reality, you might want to do a \"PUT / upsert\" or add a debounce.\n   */\n  const handleNewDeviceFieldChange = (field, value) => {\n    setNewDevice((prev) => {\n      const updated = { ...prev, [field]: value };\n\n      // We only attempt to POST if Did and location are not empty\n      // (to avoid sending incomplete data for every single keystroke).\n      // You can remove or adjust this condition if desired.\n      if (updated.Did) {\n        fetch('http://localhost:5001/api/devices', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updated),\n        })\n          .then((res) => res.json())\n          .then((data) => {\n            console.log('Dynamic DB update response:', data);\n          })\n          .catch((err) => console.error('Error dynamically creating device:', err));\n      }\n\n      return updated;\n    });\n  };\n\n  return (\n    <Container maxWidth=\"md\" sx={{ marginTop: 4 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Water Management System\n      </Typography>\n\n      {/* Button to open \"Add Device\" dialog */}\n      <Button variant=\"contained\" sx={{ mb: 2 }} onClick={handleOpenAddDialog}>\n        Add Device\n      </Button>\n\n      {/* Table of current devices */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell><strong>Device ID</strong></TableCell>\n              <TableCell><strong>Water Flow (L/s)</strong></TableCell>\n              <TableCell><strong>Pressure (psi)</strong></TableCell>\n              <TableCell><strong>Temperature (°C)</strong></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {devices.map((device, index) => (\n              <TableRow\n                key={device.Did}\n                hover\n                style={{ cursor: 'pointer' }}\n                onClick={() => handleRowClick(index)}\n              >\n                <TableCell>{device.Did}</TableCell>\n                <TableCell>{device.waterFlow}</TableCell>\n                <TableCell>{device.pressure}</TableCell>\n                <TableCell>{device.temperature}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Dialog for adjusting sensor data */}\n      <Dialog open={openDialog} onClose={handleDialogClose} fullWidth maxWidth=\"sm\">\n        <DialogTitle>Adjust Sensor Data</DialogTitle>\n        <DialogContent dividers>\n          {selectedDevice && (\n            <>\n              <Box sx={{ mt: 2 }}>\n                <Typography gutterBottom>Water Flow (L/s)</Typography>\n                <Slider\n                  value={selectedDevice.waterFlow}\n                  min={0}\n                  max={500}\n                  step={1}\n                  onChange={(e, val) => handleSliderChange('waterFlow', val)}\n                />\n                <Typography variant=\"body2\">\n                  Current: {selectedDevice.waterFlow.toFixed(2)}\n                </Typography>\n              </Box>\n\n              <Box sx={{ mt: 4 }}>\n                <Typography gutterBottom>Pressure (psi)</Typography>\n                <Slider\n                  value={selectedDevice.pressure}\n                  min={0}\n                  max={150}\n                  step={1}\n                  onChange={(e, val) => handleSliderChange('pressure', val)}\n                />\n                <Typography variant=\"body2\">\n                  Current: {selectedDevice.pressure.toFixed(2)}\n                </Typography>\n              </Box>\n\n              <Box sx={{ mt: 4 }}>\n                <Typography gutterBottom>Temperature (°C)</Typography>\n                <Slider\n                  value={selectedDevice.temperature}\n                  min={0}\n                  max={100}\n                  step={1}\n                  onChange={(e, val) => handleSliderChange('temperature', val)}\n                />\n                <Typography variant=\"body2\">\n                  Current: {selectedDevice.temperature.toFixed(2)}\n                </Typography>\n              </Box>\n            </>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDialogClose} variant=\"contained\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Dialog for ADDING a new device */}\n      <Dialog open={openAddDialog} onClose={handleCloseAddDialog} fullWidth maxWidth=\"sm\">\n        <DialogTitle>Add New Device</DialogTitle>\n        <DialogContent dividers>\n          {/* As user types, we call handleNewDeviceFieldChange immediately */}\n          <Stack spacing={2} sx={{ mt: 2 }}>\n            <TextField\n              label=\"Device ID\"\n              value={newDevice.Did}\n              onChange={(e) => handleNewDeviceFieldChange('Did', e.target.value)}\n              fullWidth\n            />\n            <TextField\n              label=\"Water Flow (L/s)\"\n              type=\"number\"\n              value={newDevice.waterFlow}\n              onChange={(e) =>\n                handleNewDeviceFieldChange('waterFlow', parseFloat(e.target.value) || 0)\n              }\n              fullWidth\n            />\n            <TextField\n              label=\"Pressure (psi)\"\n              type=\"number\"\n              value={newDevice.pressure}\n              onChange={(e) =>\n                handleNewDeviceFieldChange('pressure', parseFloat(e.target.value) || 0)\n              }\n              fullWidth\n            />\n            <TextField\n              label=\"Temperature (°C)\"\n              type=\"number\"\n              value={newDevice.temperature}\n              onChange={(e) =>\n                handleNewDeviceFieldChange('temperature', parseFloat(e.target.value) || 0)\n              }\n              fullWidth\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          {/* You can decide what \"Add\" does now—maybe just close the dialog */}\n          <Button onClick={handleCloseAddDialog} variant=\"outlined\">\n            Cancel\n          </Button>\n          <Button onClick={handleAddDevice} variant=\"contained\">\n            Done\n          </Button>\n        </DialogActions>\n      </Dialog>\n    <DeviceAnalytics deviceId=\"device1\" />\n    </Container>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}