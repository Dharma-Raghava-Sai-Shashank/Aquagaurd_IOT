{"ast":null,"code":"var _jsxFileName = \"/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, CircularProgress, Button, Slider } from '@mui/material';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend);\nfunction DeviceAnalytics({\n  deviceId\n}) {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({});\n  const [chartType, setChartType] = useState('line'); // 'line', 'bar', 'pie'\n  const [dataRange, setDataRange] = useState([0, 50]); // Default range for data points\n  const [maxDataPoints, setMaxDataPoints] = useState(50); // Initial arbitrary max\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`http://localhost:5001/api/devices/${deviceId}`).then(res => res.json()).then(device => {\n      const maxDataLength = Math.min(device.waterFlow.length, device.pressure.length, device.temperature.length);\n      setMaxDataPoints(maxDataLength); // Update the maximum data points based on loaded data\n      processChartData(device, dataRange, maxDataLength);\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Error fetching device data:\", error);\n      setLoading(false);\n    });\n  }, [deviceId, dataRange]); // React to changes in deviceId and dataRange\n\n  const processChartData = (device, range, maxDataLength) => {\n    const adjustedMaxDataRange = Math.min(range[1], maxDataLength);\n    const labels = Array.from({\n      length: adjustedMaxDataRange - range[0]\n    }, (_, i) => i + range[0]);\n    const data = {\n      labels,\n      datasets: [{\n        label: 'Water Flow (L/s)',\n        data: device.waterFlow.slice(range[0], adjustedMaxDataRange),\n        borderColor: 'rgb(75, 192, 192)',\n        backgroundColor: 'rgba(75, 192, 192, 0.5)'\n      }, {\n        label: 'Pressure (psi)',\n        data: device.pressure.slice(range[0], adjustedMaxDataRange),\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.5)'\n      }, {\n        label: 'Temperature (°C)',\n        data: device.temperature.slice(range[0], adjustedMaxDataRange),\n        borderColor: 'rgb(53, 162, 235)',\n        backgroundColor: 'rgba(53, 162, 235, 0.5)'\n      }]\n    };\n    setChartData(data);\n  };\n  const handleRangeChange = (event, newValue) => {\n    setDataRange(newValue);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 68\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: [\"Device Analytics: \", deviceId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: '80%',\n        margin: '20px auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        gutterBottom: true,\n        children: \"Select Data Range:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        value: dataRange,\n        onChange: handleRangeChange,\n        valueLabelDisplay: \"auto\",\n        min: 0,\n        max: maxDataPoints - 1,\n        marks: true,\n        step: 1,\n        disableSwap: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => setChartType('line'),\n      sx: {\n        mr: 1\n      },\n      children: \"Line Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => setChartType('bar'),\n      sx: {\n        mr: 1\n      },\n      children: \"Bar Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => setChartType('pie'),\n      children: \"Pie Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), chartType === 'line' && /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 32\n    }, this), chartType === 'bar' && /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 31\n    }, this), chartType === 'pie' && /*#__PURE__*/_jsxDEV(Pie, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(DeviceAnalytics, \"k+tX3qLhP++l9XQ3BuIDv2VnDT8=\");\n_c = DeviceAnalytics;\nexport default DeviceAnalytics;\nvar _c;\n$RefreshReg$(_c, \"DeviceAnalytics\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","CircularProgress","Button","Slider","Line","Bar","Pie","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","DeviceAnalytics","deviceId","_s","loading","setLoading","chartData","setChartData","chartType","setChartType","dataRange","setDataRange","maxDataPoints","setMaxDataPoints","fetch","then","res","json","device","maxDataLength","Math","min","waterFlow","length","pressure","temperature","processChartData","catch","error","console","range","adjustedMaxDataRange","labels","Array","from","_","i","data","datasets","label","slice","borderColor","backgroundColor","handleRangeChange","event","newValue","sx","display","justifyContent","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","gutterBottom","width","margin","value","onChange","valueLabelDisplay","max","marks","step","disableSwap","onClick","mr","_c","$RefreshReg$"],"sources":["/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  CircularProgress,\n  Button,\n  Slider\n} from '@mui/material';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend);\n\nfunction DeviceAnalytics({ deviceId }) {\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({});\n  const [chartType, setChartType] = useState('line'); // 'line', 'bar', 'pie'\n  const [dataRange, setDataRange] = useState([0, 50]); // Default range for data points\n  const [maxDataPoints, setMaxDataPoints] = useState(50); // Initial arbitrary max\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`http://localhost:5001/api/devices/${deviceId}`)\n      .then(res => res.json())\n      .then(device => {\n        const maxDataLength = Math.min(device.waterFlow.length, device.pressure.length, device.temperature.length);\n        setMaxDataPoints(maxDataLength); // Update the maximum data points based on loaded data\n        processChartData(device, dataRange, maxDataLength);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error(\"Error fetching device data:\", error);\n        setLoading(false);\n      });\n  }, [deviceId, dataRange]); // React to changes in deviceId and dataRange\n\n  const processChartData = (device, range, maxDataLength) => {\n    const adjustedMaxDataRange = Math.min(range[1], maxDataLength);\n    const labels = Array.from({length: adjustedMaxDataRange - range[0]}, (_, i) => i + range[0]);\n\n    const data = {\n      labels,\n      datasets: [\n        {\n          label: 'Water Flow (L/s)',\n          data: device.waterFlow.slice(range[0], adjustedMaxDataRange),\n          borderColor: 'rgb(75, 192, 192)',\n          backgroundColor: 'rgba(75, 192, 192, 0.5)',\n        },\n        {\n          label: 'Pressure (psi)',\n          data: device.pressure.slice(range[0], adjustedMaxDataRange),\n          borderColor: 'rgb(255, 99, 132)',\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\n        },\n        {\n          label: 'Temperature (°C)',\n          data: device.temperature.slice(range[0], adjustedMaxDataRange),\n          borderColor: 'rgb(53, 162, 235)',\n          backgroundColor: 'rgba(53, 162, 235, 0.5)',\n        }\n      ]\n    };\n    setChartData(data);\n  };\n\n  const handleRangeChange = (event, newValue) => {\n    setDataRange(newValue);\n  };\n\n  if (loading) {\n    return <Box sx={{ display: 'flex', justifyContent: 'center' }}><CircularProgress /></Box>;\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Device Analytics: {deviceId}\n      </Typography>\n\n      {/* Range Slider for selecting data points */}\n      <Box sx={{ width: '80%', margin: '20px auto' }}>\n        <Typography gutterBottom>Select Data Range:</Typography>\n        <Slider\n          value={dataRange}\n          onChange={handleRangeChange}\n          valueLabelDisplay=\"auto\"\n          min={0}\n          max={maxDataPoints - 1}\n          marks\n          step={1}\n          disableSwap\n        />\n      </Box>\n\n      {/* Buttons to switch charts */}\n      <Button variant=\"contained\" onClick={() => setChartType('line')} sx={{ mr: 1 }}>Line Chart</Button>\n      <Button variant=\"contained\" onClick={() => setChartType('bar')} sx={{ mr: 1 }}>Bar Chart</Button>\n      <Button variant=\"contained\" onClick={() => setChartType('pie')}>Pie Chart</Button>\n\n      {/* Conditionally render charts */}\n      {chartType === 'line' && <Line data={chartData} />}\n      {chartType === 'bar' && <Bar data={chartData} />}\n      {chartType === 'pie' && <Pie data={chartData} />}\n    </Box>\n  );\n}\n\nexport default DeviceAnalytics;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}