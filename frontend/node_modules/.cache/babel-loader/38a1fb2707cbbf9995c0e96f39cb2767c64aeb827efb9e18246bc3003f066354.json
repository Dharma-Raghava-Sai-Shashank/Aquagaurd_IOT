{"ast":null,"code":"var _jsxFileName = \"/Users/shashank/Downloads/Reddy/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Dialog, DialogTitle, DialogContent, DialogActions, Button, Slider, Box, TextField, Stack } from \"@mui/material\";\nimport DeviceAnalytics from \"./DeviceAnalytics\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Devices fetched from the DB on mount\n  const [devices, setDevices] = useState([]);\n\n  // Dialog to edit sensor data\n  const [openDialog, setOpenDialog] = useState(false);\n  const [selectedDeviceIndex, setSelectedDeviceIndex] = useState(null);\n\n  // Dialog to add a new device\n  const [openAddDialog, setOpenAddDialog] = useState(false);\n\n  // The new device being typed in the form\n  const [newDevice, setNewDevice] = useState({\n    Did: \"\",\n    waterFlow: [],\n    // Initialize as empty array for multiple readings\n    pressure: [],\n    // Initialize as empty array for multiple readings\n    temperature: [] // Initialize as empty array for multiple readings\n  });\n\n  /**\n   * 1) Fetch from DB on first render\n   */\n  useEffect(() => {\n    fetch(\"http://localhost:5001/api/devices\").then(res => res.json()).then(data => setDevices(data)).catch(err => console.error(\"Error fetching devices:\", err));\n  }, []);\n\n  /**\n   * 2) Random update effect (every second)\n   *    Remove or modify if not needed.\n   */\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const updatedDevices = prevDevices.map(device => {\n        var _device$waterFlow$sli, _device$pressure$slic, _device$temperature$s;\n        // Generate new random sensor readings\n        const newWaterFlowReading = {\n          value: Math.abs(parseFloat((((_device$waterFlow$sli = device.waterFlow.slice(-1)[0]) === null || _device$waterFlow$sli === void 0 ? void 0 : _device$waterFlow$sli.value) || 0) + (Math.random() * 2 - 1)).toFixed(2)),\n          timestamp: new Date()\n        };\n        const newPressureReading = {\n          value: Math.abs(parseFloat((((_device$pressure$slic = device.pressure.slice(-1)[0]) === null || _device$pressure$slic === void 0 ? void 0 : _device$pressure$slic.value) || 0) + (Math.random() * 2 - 1)).toFixed(2)),\n          timestamp: new Date()\n        };\n        const newTemperatureReading = {\n          value: Math.abs(parseFloat((((_device$temperature$s = device.temperature.slice(-1)[0]) === null || _device$temperature$s === void 0 ? void 0 : _device$temperature$s.value) || 0) + (Math.random() * 2 - 1)).toFixed(2)),\n          timestamp: new Date()\n        };\n\n        // Append new readings to each sensor data array\n        return {\n          ...device,\n          waterFlow: [...device.waterFlow, newWaterFlowReading],\n          pressure: [...device.pressure, newPressureReading],\n          temperature: [...device.temperature, newTemperatureReading]\n        };\n      });\n    }, 2000);\n\n    // Cleanup the interval on component unmount\n    return () => clearInterval(interval);\n  }, [devices]);\n\n  // --------------------------\n  // Sensor-editing dialog\n  // --------------------------\n  const handleRowClick = index => {\n    setSelectedDeviceIndex(index);\n    setOpenDialog(true);\n  };\n  const handleDialogClose = () => {\n    setOpenDialog(false);\n  };\n\n  // Slider changes for the selected device\n  const handleSliderChange = (field, newValue) => {\n    setDevices(prevDevices => {\n      const updated = [...prevDevices];\n      updated[selectedDeviceIndex] = {\n        ...updated[selectedDeviceIndex],\n        [field]: newValue\n      };\n      return updated;\n    });\n  };\n  const selectedDevice = selectedDeviceIndex !== null ? devices[selectedDeviceIndex] : null;\n\n  // --------------------------\n  // \"Add Device\" dialog\n  // --------------------------\n  const handleOpenAddDialog = () => {\n    setNewDevice({\n      Did: \"\",\n      waterFlow: 0,\n      pressure: 0,\n      temperature: 0\n    });\n    setOpenAddDialog(true);\n  };\n  const handleCloseAddDialog = () => {\n    setOpenAddDialog(false);\n  };\n\n  // Function to add a new device\n  const handleAddDevice = () => {\n    // Check if all required fields are filled (assuming Did is necessary to create a new entry)\n    if (!newDevice.Did) {\n      alert(\"Please fill in all required fields.\");\n      return;\n    }\n    fetch(\"http://localhost:5001/api/devices\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newDevice)\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      console.log(\"Add device response:\", data);\n      setDevices([...devices, newDevice]); // Assuming the server returns the created device\n      handleCloseAddDialog(); // Close the dialog upon successful addition\n    }).catch(error => {\n      console.error(\"Error adding new device:\", error);\n      alert(\"Failed to add device: \" + error.message); // Optionally alert the user\n    });\n  };\n\n  /**\n   * Called whenever any field in newDevice changes.\n   * 1) Update local `newDevice`.\n   * 2) Immediately POST to the server (creating or re-creating).\n   *    - In reality, you might want to do a \"PUT / upsert\" or add a debounce.\n   */\n  const handleNewDeviceFieldChange = (field, value) => {\n    setNewDevice(prev => {\n      const updated = {\n        ...prev,\n        [field]: value\n      };\n\n      // We only attempt to POST if Did and location are not empty\n      // (to avoid sending incomplete data for every single keystroke).\n      // You can remove or adjust this condition if desired.\n      if (updated.Did) {\n        fetch(\"http://localhost:5001/api/devices\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(updated)\n        }).then(res => res.json()).then(data => {\n          console.log(\"Dynamic DB update response:\", data);\n        }).catch(err => console.error(\"Error dynamically creating device:\", err));\n      }\n      return updated;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    sx: {\n      marginTop: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Water Management System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      sx: {\n        mb: 2\n      },\n      onClick: handleOpenAddDialog,\n      children: \"Add Device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Device ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Water Flow (L/s)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Pressure (psi)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Temperature (\\xB0C)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: devices.map((device, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n            hover: true,\n            style: {\n              cursor: \"pointer\"\n            },\n            onClick: () => handleRowClick(index),\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: device.Did\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: device.waterFlow\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: device.pressure\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: device.temperature\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 17\n            }, this)]\n          }, device.Did, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: handleDialogClose,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Adjust Sensor Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        dividers: true,\n        children: selectedDevice && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              children: \"Water Flow (L/s)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Slider, {\n              value: selectedDevice.waterFlow,\n              min: 0,\n              max: 500,\n              step: 1,\n              onChange: (e, val) => handleSliderChange(\"waterFlow\", val)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [\"Current: \", selectedDevice.waterFlow.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 4\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              children: \"Pressure (psi)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Slider, {\n              value: selectedDevice.pressure,\n              min: 0,\n              max: 150,\n              step: 1,\n              onChange: (e, val) => handleSliderChange(\"pressure\", val)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [\"Current: \", selectedDevice.pressure.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 4\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              children: \"Temperature (\\xB0C)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Slider, {\n              value: selectedDevice.temperature,\n              min: 0,\n              max: 100,\n              step: 1,\n              onChange: (e, val) => handleSliderChange(\"temperature\", val)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [\"Current: \", selectedDevice.temperature.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleDialogClose,\n          variant: \"contained\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openAddDialog,\n      onClose: handleCloseAddDialog,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Add New Device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        dividers: true,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 2,\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Device ID\",\n            value: newDevice.Did,\n            onChange: e => handleNewDeviceFieldChange(\"Did\", e.target.value),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Water Flow (L/s)\",\n            type: \"number\",\n            value: newDevice.waterFlow,\n            onChange: e => handleNewDeviceFieldChange(\"waterFlow\", parseFloat(e.target.value) || 0),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Pressure (psi)\",\n            type: \"number\",\n            value: newDevice.pressure,\n            onChange: e => handleNewDeviceFieldChange(\"pressure\", parseFloat(e.target.value) || 0),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Temperature (\\xB0C)\",\n            type: \"number\",\n            value: newDevice.temperature,\n            onChange: e => handleNewDeviceFieldChange(\"temperature\", parseFloat(e.target.value) || 0),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseAddDialog,\n          variant: \"outlined\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleAddDevice,\n          variant: \"contained\",\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeviceAnalytics, {\n      deviceId: \"Dev-1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"urOx7Ni5zCsPeq/gpRsD8KYOeh8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Container","Typography","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Dialog","DialogTitle","DialogContent","DialogActions","Button","Slider","Box","TextField","Stack","DeviceAnalytics","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","devices","setDevices","openDialog","setOpenDialog","selectedDeviceIndex","setSelectedDeviceIndex","openAddDialog","setOpenAddDialog","newDevice","setNewDevice","Did","waterFlow","pressure","temperature","fetch","then","res","json","data","catch","err","console","error","interval","setInterval","updatedDevices","prevDevices","map","device","_device$waterFlow$sli","_device$pressure$slic","_device$temperature$s","newWaterFlowReading","value","Math","abs","parseFloat","slice","random","toFixed","timestamp","Date","newPressureReading","newTemperatureReading","clearInterval","handleRowClick","index","handleDialogClose","handleSliderChange","field","newValue","updated","selectedDevice","handleOpenAddDialog","handleCloseAddDialog","handleAddDevice","alert","method","headers","body","JSON","stringify","response","log","message","handleNewDeviceFieldChange","prev","maxWidth","sx","marginTop","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","mb","onClick","component","hover","style","cursor","open","onClose","fullWidth","dividers","mt","min","max","step","onChange","e","val","spacing","label","target","type","deviceId","_c","$RefreshReg$"],"sources":["/Users/shashank/Downloads/Reddy/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Slider,\n  Box,\n  TextField,\n  Stack,\n} from \"@mui/material\";\nimport DeviceAnalytics from \"./DeviceAnalytics\";\n\nfunction App() {\n  // Devices fetched from the DB on mount\n  const [devices, setDevices] = useState([]);\n\n  // Dialog to edit sensor data\n  const [openDialog, setOpenDialog] = useState(false);\n  const [selectedDeviceIndex, setSelectedDeviceIndex] = useState(null);\n\n  // Dialog to add a new device\n  const [openAddDialog, setOpenAddDialog] = useState(false);\n\n  // The new device being typed in the form\n  const [newDevice, setNewDevice] = useState({\n    Did: \"\",\n    waterFlow: [], // Initialize as empty array for multiple readings\n    pressure: [], // Initialize as empty array for multiple readings\n    temperature: [], // Initialize as empty array for multiple readings\n  });\n\n  /**\n   * 1) Fetch from DB on first render\n   */\n  useEffect(() => {\n    fetch(\"http://localhost:5001/api/devices\")\n      .then((res) => res.json())\n      .then((data) => setDevices(data))\n      .catch((err) => console.error(\"Error fetching devices:\", err));\n  }, []);\n\n  /**\n   * 2) Random update effect (every second)\n   *    Remove or modify if not needed.\n   */\n  useEffect(() => {\n    const interval = setInterval(() => {\n      \n      const updatedDevices = prevDevices.map((device) => {\n        // Generate new random sensor readings\n        const newWaterFlowReading = {\n          value: Math.abs(parseFloat((device.waterFlow.slice(-1)[0]?.value || 0) + (Math.random() * 2 - 1)).toFixed(2)),\n          timestamp: new Date()\n        };\n        const newPressureReading = {\n          value: Math.abs(parseFloat((device.pressure.slice(-1)[0]?.value || 0) + (Math.random() * 2 - 1)).toFixed(2)),\n          timestamp: new Date()\n        };\n        const newTemperatureReading = {\n          value: Math.abs(parseFloat((device.temperature.slice(-1)[0]?.value || 0) + (Math.random() * 2 - 1)).toFixed(2)),\n          timestamp: new Date()\n        };\n    \n        // Append new readings to each sensor data array\n        return {\n          ...device,\n          waterFlow: [...device.waterFlow, newWaterFlowReading],\n          pressure: [...device.pressure, newPressureReading],\n          temperature: [...device.temperature, newTemperatureReading]\n        };\n      });\n    }, 2000);\n\n    // Cleanup the interval on component unmount\n    return () => clearInterval(interval);\n  }, [devices]);\n\n  // --------------------------\n  // Sensor-editing dialog\n  // --------------------------\n  const handleRowClick = (index) => {\n    setSelectedDeviceIndex(index);\n    setOpenDialog(true);\n  };\n\n  const handleDialogClose = () => {\n    setOpenDialog(false);\n  };\n\n  // Slider changes for the selected device\n  const handleSliderChange = (field, newValue) => {\n    setDevices((prevDevices) => {\n      const updated = [...prevDevices];\n      updated[selectedDeviceIndex] = {\n        ...updated[selectedDeviceIndex],\n        [field]: newValue,\n      };\n      return updated;\n    });\n  };\n\n  const selectedDevice =\n    selectedDeviceIndex !== null ? devices[selectedDeviceIndex] : null;\n\n  // --------------------------\n  // \"Add Device\" dialog\n  // --------------------------\n  const handleOpenAddDialog = () => {\n    setNewDevice({\n      Did: \"\",\n      waterFlow: 0,\n      pressure: 0,\n      temperature: 0,\n    });\n    setOpenAddDialog(true);\n  };\n\n  const handleCloseAddDialog = () => {\n    setOpenAddDialog(false);\n  };\n\n  // Function to add a new device\n  const handleAddDevice = () => {\n    // Check if all required fields are filled (assuming Did is necessary to create a new entry)\n    if (!newDevice.Did) {\n      alert(\"Please fill in all required fields.\");\n      return;\n    }\n\n    fetch(\"http://localhost:5001/api/devices\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newDevice),\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        console.log(\"Add device response:\", data);\n        setDevices([...devices, newDevice]); // Assuming the server returns the created device\n        handleCloseAddDialog(); // Close the dialog upon successful addition\n      })\n      .catch((error) => {\n        console.error(\"Error adding new device:\", error);\n        alert(\"Failed to add device: \" + error.message); // Optionally alert the user\n      });\n  };\n\n  /**\n   * Called whenever any field in newDevice changes.\n   * 1) Update local `newDevice`.\n   * 2) Immediately POST to the server (creating or re-creating).\n   *    - In reality, you might want to do a \"PUT / upsert\" or add a debounce.\n   */\n  const handleNewDeviceFieldChange = (field, value) => {\n    setNewDevice((prev) => {\n      const updated = { ...prev, [field]: value };\n\n      // We only attempt to POST if Did and location are not empty\n      // (to avoid sending incomplete data for every single keystroke).\n      // You can remove or adjust this condition if desired.\n      if (updated.Did) {\n        fetch(\"http://localhost:5001/api/devices\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(updated),\n        })\n          .then((res) => res.json())\n          .then((data) => {\n            console.log(\"Dynamic DB update response:\", data);\n          })\n          .catch((err) =>\n            console.error(\"Error dynamically creating device:\", err)\n          );\n      }\n\n      return updated;\n    });\n  };\n\n  return (\n    <Container maxWidth=\"md\" sx={{ marginTop: 4 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Water Management System\n      </Typography>\n\n      {/* Button to open \"Add Device\" dialog */}\n      <Button variant=\"contained\" sx={{ mb: 2 }} onClick={handleOpenAddDialog}>\n        Add Device\n      </Button>\n\n      {/* Table of current devices */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <strong>Device ID</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Water Flow (L/s)</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Pressure (psi)</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Temperature (°C)</strong>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {devices.map((device, index) => (\n              <TableRow\n                key={device.Did}\n                hover\n                style={{ cursor: \"pointer\" }}\n                onClick={() => handleRowClick(index)}\n              >\n                <TableCell>{device.Did}</TableCell>\n                <TableCell>{device.waterFlow}</TableCell>\n                <TableCell>{device.pressure}</TableCell>\n                <TableCell>{device.temperature}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Dialog for adjusting sensor data */}\n      <Dialog\n        open={openDialog}\n        onClose={handleDialogClose}\n        fullWidth\n        maxWidth=\"sm\"\n      >\n        <DialogTitle>Adjust Sensor Data</DialogTitle>\n        <DialogContent dividers>\n          {selectedDevice && (\n            <>\n              <Box sx={{ mt: 2 }}>\n                <Typography gutterBottom>Water Flow (L/s)</Typography>\n                <Slider\n                  value={selectedDevice.waterFlow}\n                  min={0}\n                  max={500}\n                  step={1}\n                  onChange={(e, val) => handleSliderChange(\"waterFlow\", val)}\n                />\n                <Typography variant=\"body2\">\n                  Current: {selectedDevice.waterFlow.toFixed(2)}\n                </Typography>\n              </Box>\n\n              <Box sx={{ mt: 4 }}>\n                <Typography gutterBottom>Pressure (psi)</Typography>\n                <Slider\n                  value={selectedDevice.pressure}\n                  min={0}\n                  max={150}\n                  step={1}\n                  onChange={(e, val) => handleSliderChange(\"pressure\", val)}\n                />\n                <Typography variant=\"body2\">\n                  Current: {selectedDevice.pressure.toFixed(2)}\n                </Typography>\n              </Box>\n\n              <Box sx={{ mt: 4 }}>\n                <Typography gutterBottom>Temperature (°C)</Typography>\n                <Slider\n                  value={selectedDevice.temperature}\n                  min={0}\n                  max={100}\n                  step={1}\n                  onChange={(e, val) => handleSliderChange(\"temperature\", val)}\n                />\n                <Typography variant=\"body2\">\n                  Current: {selectedDevice.temperature.toFixed(2)}\n                </Typography>\n              </Box>\n            </>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDialogClose} variant=\"contained\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Dialog for ADDING a new device */}\n      <Dialog\n        open={openAddDialog}\n        onClose={handleCloseAddDialog}\n        fullWidth\n        maxWidth=\"sm\"\n      >\n        <DialogTitle>Add New Device</DialogTitle>\n        <DialogContent dividers>\n          {/* As user types, we call handleNewDeviceFieldChange immediately */}\n          <Stack spacing={2} sx={{ mt: 2 }}>\n            <TextField\n              label=\"Device ID\"\n              value={newDevice.Did}\n              onChange={(e) =>\n                handleNewDeviceFieldChange(\"Did\", e.target.value)\n              }\n              fullWidth\n            />\n            <TextField\n              label=\"Water Flow (L/s)\"\n              type=\"number\"\n              value={newDevice.waterFlow}\n              onChange={(e) =>\n                handleNewDeviceFieldChange(\n                  \"waterFlow\",\n                  parseFloat(e.target.value) || 0\n                )\n              }\n              fullWidth\n            />\n            <TextField\n              label=\"Pressure (psi)\"\n              type=\"number\"\n              value={newDevice.pressure}\n              onChange={(e) =>\n                handleNewDeviceFieldChange(\n                  \"pressure\",\n                  parseFloat(e.target.value) || 0\n                )\n              }\n              fullWidth\n            />\n            <TextField\n              label=\"Temperature (°C)\"\n              type=\"number\"\n              value={newDevice.temperature}\n              onChange={(e) =>\n                handleNewDeviceFieldChange(\n                  \"temperature\",\n                  parseFloat(e.target.value) || 0\n                )\n              }\n              fullWidth\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          {/* You can decide what \"Add\" does now—maybe just close the dialog */}\n          <Button onClick={handleCloseAddDialog} variant=\"outlined\">\n            Cancel\n          </Button>\n          <Button onClick={handleAddDevice} variant=\"contained\">\n            Done\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <DeviceAnalytics deviceId=\"Dev-1\" />\n    </Container>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}