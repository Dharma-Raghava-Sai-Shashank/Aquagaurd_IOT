{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import {\n//   Box,\n//   Button,\n//   Container,\n//   Typography,\n//   Dialog,\n//   DialogTitle,\n//   DialogContent,\n//   DialogActions,\n//   TextField,\n//   MenuItem,\n//   Select,\n//   InputLabel,\n//   FormControl,\n//   Tabs,\n//   Tab,\n//   AppBar,\n// } from \"@mui/material\";\n// import API from \"../api\";\n// import TrackActivities from \"./TrackActivities\";\n// \n// const AdminDashboard = () => {\n//   const [tabIndex, setTabIndex] = useState(0);\n//   const [courses, setCourses] = useState([]);\n//   const [users, setUsers] = useState([]);\n//   const [selectedCourse, setSelectedCourse] = useState(\"\");\n//   const [selectedUsers, setSelectedUsers] = useState([]); // Multi-user selection\n//   const [openCourseDialog, setOpenCourseDialog] = useState(false);\n//   const [courseData, setCourseData] = useState({\n//     title: \"\",\n//     description: \"\",\n//     pdfFiles: [],\n//   });\n// \n//   // Fetch data on load\n//   useEffect(() => {\n//     fetchCourses();\n//     fetchUsers();\n//   }, []);\n// \n//   // Fetch all courses\n//   const fetchCourses = async () => {\n//     try {\n//       const { data } = await API.get(\"/courses\");\n//       setCourses(data);\n//     } catch (error) {\n//       alert(\"Error fetching courses\");\n//     }\n//   };\n// \n//   // Fetch all users\n//   const fetchUsers = async () => {\n//     try {\n//       const { data } = await API.get(\"/admin/users\");\n//       setUsers(data);\n//     } catch (error) {\n//       alert(\"Error fetching users\");\n//     }\n//   };\n// \n//   // Upload new course with multiple files\n//   const handleCourseUpload = async () => {\n//     try {\n//       if (!courseData.pdfFiles || courseData.pdfFiles.length === 0) {\n//         alert(\"Please select PDF files to upload.\");\n//         return;\n//       }\n// \n//       const formData = new FormData();\n//       courseData.pdfFiles.forEach((file) => formData.append(\"pdfFiles\", file));\n// \n//       const uploadResponse = await API.post(\"/courses/upload\", formData, {\n//         headers: { \"Content-Type\": \"multipart/form-data\" },\n//       });\n// \n//       const filePaths = uploadResponse.data.files;\n// \n//       const coursePayload = {\n//         title: courseData.title,\n//         description: courseData.description,\n//         pdfFiles: filePaths,\n//       };\n// \n//       await API.post(\"/courses\", coursePayload);\n// \n//       alert(\"Course uploaded successfully!\");\n//       fetchCourses();\n//       setOpenCourseDialog(false);\n//     } catch (error) {\n//       console.error(\"Error during upload or course creation:\", error);\n//       alert(\"Error uploading course or files. Please try again.\");\n//     }\n//   };\n// \n//   // Assign course to multiple users\n//   const handleAssign = async () => {\n//     try {\n//       if (!selectedCourse || selectedUsers.length === 0) {\n//         alert(\"Please select a course and at least one user to assign.\");\n//         return;\n//       }\n// \n//       await API.post(`/admin/${selectedCourse}/add-members`, { userIds: selectedUsers });\n// \n//       alert(\"Team members assigned successfully!\");\n//     } catch (error) {\n//       console.error(\"Error assigning team members:\", error);\n//       alert(\"Error assigning team members. Please try again.\");\n//     }\n//   };\n// \n//   // Handle tab change\n//   const handleTabChange = (event, newValue) => {\n//     setTabIndex(newValue);\n//   };\n// \n//   return (\n//     <Container maxWidth=\"md\" sx={{ mt: 8 }}>\n//       <Typography variant=\"h4\" gutterBottom>\n//         Admin Dashboard\n//       </Typography>\n// \n//       {/* Tab Navigation */}\n//       <AppBar position=\"static\" color=\"default\" sx={{ mt: 2 }}>\n//         <Tabs\n//           value={tabIndex}\n//           onChange={handleTabChange}\n//           indicatorColor=\"primary\"\n//           textColor=\"primary\"\n//           variant=\"fullWidth\"\n//         >\n//           <Tab label=\"Manage Courses\" />\n//           <Tab label=\"Track Activities\" />\n//         </Tabs>\n//       </AppBar>\n// \n//       {/* Manage Courses Tab */}\n//       {tabIndex === 0 && (\n//         <Box sx={{ mt: 4 }}>\n//           {/* Upload New Course */}\n//           <Typography variant=\"h6\">Upload a New Course</Typography>\n//           <Button\n//             variant=\"contained\"\n//             color=\"primary\"\n//             onClick={() => setOpenCourseDialog(true)}\n//             sx={{ mb: 2 }}\n//           >\n//             Upload Course\n//           </Button>\n//           <Dialog open={openCourseDialog} onClose={() => setOpenCourseDialog(false)}>\n//             <DialogTitle>Upload Course</DialogTitle>\n//             <DialogContent>\n//               <TextField\n//                 label=\"Title\"\n//                 fullWidth\n//                 margin=\"normal\"\n//                 value={courseData.title}\n//                 onChange={(e) => setCourseData({ ...courseData, title: e.target.value })}\n//               />\n//               <TextField\n//                 label=\"Description\"\n//                 fullWidth\n//                 margin=\"normal\"\n//                 value={courseData.description}\n//                 onChange={(e) => setCourseData({ ...courseData, description: e.target.value })}\n//               />\n//               <input\n//                 type=\"file\"\n//                 multiple\n//                 accept=\".pdf\"\n//                 onChange={(e) => setCourseData({ ...courseData, pdfFiles: Array.from(e.target.files) })}\n//                 style={{ marginTop: \"16px\" }}\n//               />\n//             </DialogContent>\n//             <DialogActions>\n//               <Button onClick={() => setOpenCourseDialog(false)} color=\"secondary\">\n//                 Cancel\n//               </Button>\n//               <Button onClick={handleCourseUpload} color=\"primary\">\n//                 Upload\n//               </Button>\n//             </DialogActions>\n//           </Dialog>\n// \n//           {/* Assign Course to Members */}\n//           <Typography variant=\"h6\">Assign Course to Members</Typography>\n//           <FormControl fullWidth margin=\"normal\">\n//             <InputLabel>Course</InputLabel>\n//             <Select value={selectedCourse} onChange={(e) => setSelectedCourse(e.target.value)}>\n//               {courses.map((course) => (\n//                 <MenuItem key={course._id} value={course._id}>\n//                   {course.title}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//           </FormControl>\n//           <FormControl fullWidth margin=\"normal\">\n//             <InputLabel>Members</InputLabel>\n//             <Select\n//               multiple\n//               value={selectedUsers}\n//               onChange={(e) => setSelectedUsers(e.target.value)}\n//               renderValue={(selected) =>\n//                 selected\n//                   .map((id) => users.find((user) => user._id === id)?.name || id)\n//                   .join(\", \")\n//               }\n//             >\n//               {users.map((user) => (\n//                 <MenuItem key={user._id} value={user._id}>\n//                   {user.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//           </FormControl>\n//           <Button variant=\"contained\" color=\"primary\" onClick={handleAssign}>\n//             Assign Members\n//           </Button>\n//         </Box>\n//       )}\n// \n//       {/* Track Activities Tab */}\n//       {tabIndex === 1 && (\n//         <Box sx={{ mt: 4 }}>\n//           <TrackActivities />\n//         </Box>\n//       )}\n//     </Container>\n//   );\n// };\n// \n// export default AdminDashboard;","map":{"version":3,"names":[],"sources":["/Users/shashank/Downloads/Reddy/frontend/src/components/AdminDashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import {\r\n//   Box,\r\n//   Button,\r\n//   Container,\r\n//   Typography,\r\n//   Dialog,\r\n//   DialogTitle,\r\n//   DialogContent,\r\n//   DialogActions,\r\n//   TextField,\r\n//   MenuItem,\r\n//   Select,\r\n//   InputLabel,\r\n//   FormControl,\r\n//   Tabs,\r\n//   Tab,\r\n//   AppBar,\r\n// } from \"@mui/material\";\r\n// import API from \"../api\";\r\n// import TrackActivities from \"./TrackActivities\";\r\n// \r\n// const AdminDashboard = () => {\r\n//   const [tabIndex, setTabIndex] = useState(0);\r\n//   const [courses, setCourses] = useState([]);\r\n//   const [users, setUsers] = useState([]);\r\n//   const [selectedCourse, setSelectedCourse] = useState(\"\");\r\n//   const [selectedUsers, setSelectedUsers] = useState([]); // Multi-user selection\r\n//   const [openCourseDialog, setOpenCourseDialog] = useState(false);\r\n//   const [courseData, setCourseData] = useState({\r\n//     title: \"\",\r\n//     description: \"\",\r\n//     pdfFiles: [],\r\n//   });\r\n// \r\n//   // Fetch data on load\r\n//   useEffect(() => {\r\n//     fetchCourses();\r\n//     fetchUsers();\r\n//   }, []);\r\n// \r\n//   // Fetch all courses\r\n//   const fetchCourses = async () => {\r\n//     try {\r\n//       const { data } = await API.get(\"/courses\");\r\n//       setCourses(data);\r\n//     } catch (error) {\r\n//       alert(\"Error fetching courses\");\r\n//     }\r\n//   };\r\n// \r\n//   // Fetch all users\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n//       const { data } = await API.get(\"/admin/users\");\r\n//       setUsers(data);\r\n//     } catch (error) {\r\n//       alert(\"Error fetching users\");\r\n//     }\r\n//   };\r\n// \r\n//   // Upload new course with multiple files\r\n//   const handleCourseUpload = async () => {\r\n//     try {\r\n//       if (!courseData.pdfFiles || courseData.pdfFiles.length === 0) {\r\n//         alert(\"Please select PDF files to upload.\");\r\n//         return;\r\n//       }\r\n// \r\n//       const formData = new FormData();\r\n//       courseData.pdfFiles.forEach((file) => formData.append(\"pdfFiles\", file));\r\n// \r\n//       const uploadResponse = await API.post(\"/courses/upload\", formData, {\r\n//         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n//       });\r\n// \r\n//       const filePaths = uploadResponse.data.files;\r\n// \r\n//       const coursePayload = {\r\n//         title: courseData.title,\r\n//         description: courseData.description,\r\n//         pdfFiles: filePaths,\r\n//       };\r\n// \r\n//       await API.post(\"/courses\", coursePayload);\r\n// \r\n//       alert(\"Course uploaded successfully!\");\r\n//       fetchCourses();\r\n//       setOpenCourseDialog(false);\r\n//     } catch (error) {\r\n//       console.error(\"Error during upload or course creation:\", error);\r\n//       alert(\"Error uploading course or files. Please try again.\");\r\n//     }\r\n//   };\r\n// \r\n//   // Assign course to multiple users\r\n//   const handleAssign = async () => {\r\n//     try {\r\n//       if (!selectedCourse || selectedUsers.length === 0) {\r\n//         alert(\"Please select a course and at least one user to assign.\");\r\n//         return;\r\n//       }\r\n// \r\n//       await API.post(`/admin/${selectedCourse}/add-members`, { userIds: selectedUsers });\r\n// \r\n//       alert(\"Team members assigned successfully!\");\r\n//     } catch (error) {\r\n//       console.error(\"Error assigning team members:\", error);\r\n//       alert(\"Error assigning team members. Please try again.\");\r\n//     }\r\n//   };\r\n// \r\n//   // Handle tab change\r\n//   const handleTabChange = (event, newValue) => {\r\n//     setTabIndex(newValue);\r\n//   };\r\n// \r\n//   return (\r\n//     <Container maxWidth=\"md\" sx={{ mt: 8 }}>\r\n//       <Typography variant=\"h4\" gutterBottom>\r\n//         Admin Dashboard\r\n//       </Typography>\r\n// \r\n//       {/* Tab Navigation */}\r\n//       <AppBar position=\"static\" color=\"default\" sx={{ mt: 2 }}>\r\n//         <Tabs\r\n//           value={tabIndex}\r\n//           onChange={handleTabChange}\r\n//           indicatorColor=\"primary\"\r\n//           textColor=\"primary\"\r\n//           variant=\"fullWidth\"\r\n//         >\r\n//           <Tab label=\"Manage Courses\" />\r\n//           <Tab label=\"Track Activities\" />\r\n//         </Tabs>\r\n//       </AppBar>\r\n// \r\n//       {/* Manage Courses Tab */}\r\n//       {tabIndex === 0 && (\r\n//         <Box sx={{ mt: 4 }}>\r\n//           {/* Upload New Course */}\r\n//           <Typography variant=\"h6\">Upload a New Course</Typography>\r\n//           <Button\r\n//             variant=\"contained\"\r\n//             color=\"primary\"\r\n//             onClick={() => setOpenCourseDialog(true)}\r\n//             sx={{ mb: 2 }}\r\n//           >\r\n//             Upload Course\r\n//           </Button>\r\n//           <Dialog open={openCourseDialog} onClose={() => setOpenCourseDialog(false)}>\r\n//             <DialogTitle>Upload Course</DialogTitle>\r\n//             <DialogContent>\r\n//               <TextField\r\n//                 label=\"Title\"\r\n//                 fullWidth\r\n//                 margin=\"normal\"\r\n//                 value={courseData.title}\r\n//                 onChange={(e) => setCourseData({ ...courseData, title: e.target.value })}\r\n//               />\r\n//               <TextField\r\n//                 label=\"Description\"\r\n//                 fullWidth\r\n//                 margin=\"normal\"\r\n//                 value={courseData.description}\r\n//                 onChange={(e) => setCourseData({ ...courseData, description: e.target.value })}\r\n//               />\r\n//               <input\r\n//                 type=\"file\"\r\n//                 multiple\r\n//                 accept=\".pdf\"\r\n//                 onChange={(e) => setCourseData({ ...courseData, pdfFiles: Array.from(e.target.files) })}\r\n//                 style={{ marginTop: \"16px\" }}\r\n//               />\r\n//             </DialogContent>\r\n//             <DialogActions>\r\n//               <Button onClick={() => setOpenCourseDialog(false)} color=\"secondary\">\r\n//                 Cancel\r\n//               </Button>\r\n//               <Button onClick={handleCourseUpload} color=\"primary\">\r\n//                 Upload\r\n//               </Button>\r\n//             </DialogActions>\r\n//           </Dialog>\r\n// \r\n//           {/* Assign Course to Members */}\r\n//           <Typography variant=\"h6\">Assign Course to Members</Typography>\r\n//           <FormControl fullWidth margin=\"normal\">\r\n//             <InputLabel>Course</InputLabel>\r\n//             <Select value={selectedCourse} onChange={(e) => setSelectedCourse(e.target.value)}>\r\n//               {courses.map((course) => (\r\n//                 <MenuItem key={course._id} value={course._id}>\r\n//                   {course.title}\r\n//                 </MenuItem>\r\n//               ))}\r\n//             </Select>\r\n//           </FormControl>\r\n//           <FormControl fullWidth margin=\"normal\">\r\n//             <InputLabel>Members</InputLabel>\r\n//             <Select\r\n//               multiple\r\n//               value={selectedUsers}\r\n//               onChange={(e) => setSelectedUsers(e.target.value)}\r\n//               renderValue={(selected) =>\r\n//                 selected\r\n//                   .map((id) => users.find((user) => user._id === id)?.name || id)\r\n//                   .join(\", \")\r\n//               }\r\n//             >\r\n//               {users.map((user) => (\r\n//                 <MenuItem key={user._id} value={user._id}>\r\n//                   {user.name}\r\n//                 </MenuItem>\r\n//               ))}\r\n//             </Select>\r\n//           </FormControl>\r\n//           <Button variant=\"contained\" color=\"primary\" onClick={handleAssign}>\r\n//             Assign Members\r\n//           </Button>\r\n//         </Box>\r\n//       )}\r\n// \r\n//       {/* Track Activities Tab */}\r\n//       {tabIndex === 1 && (\r\n//         <Box sx={{ mt: 4 }}>\r\n//           <TrackActivities />\r\n//         </Box>\r\n//       )}\r\n//     </Container>\r\n//   );\r\n// };\r\n// \r\n// export default AdminDashboard;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}