{"ast":null,"code":"var _jsxFileName = \"/Users/shashank/Downloads/Reddy/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Dialog, DialogTitle, DialogContent, DialogActions, Button, Slider, Box, TextField, Stack } from \"@mui/material\";\nimport DeviceAnalytics from \"./DeviceAnalytics\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Devices fetched from the DB on mount\n  const [devices, setDevices] = useState([]);\n\n  // Dialog to edit sensor data\n  const [openDialog, setOpenDialog] = useState(false);\n  const [selectedDeviceIndex, setSelectedDeviceIndex] = useState(null);\n\n  // Dialog to add a new device\n  const [openAddDialog, setOpenAddDialog] = useState(false);\n  const [newDevice, setNewDevice] = useState({\n    Did: \"\",\n    waterFlow: 0,\n    // Initialize as a single number\n    pressure: 0,\n    // Initialize as a single number\n    temperature: 0 // Initialize as a single number\n  });\n\n  /**\n   * 1) Fetch from DB on first render\n   */\n  useEffect(() => {\n    fetch(\"http://localhost:5001/api/devices\").then(res => res.json()).then(data => {\n      const initializedDevices = data.map(device => ({\n        ...device,\n        waterFlow: parseFloat(device.waterFlow) || 0,\n        // Ensure it's a number\n        pressure: parseFloat(device.pressure) || 0,\n        temperature: parseFloat(device.temperature) || 0\n      }));\n      setDevices(initializedDevices);\n    }).catch(err => console.error(\"Error fetching devices:\", err));\n  }, []);\n\n  /**\n   * 2) Random update effect (every second)\n   *    Remove or modify if not needed.\n   */\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDevices(prevDevices => {\n        const updatedDevices = prevDevices.map(device => {\n          const newWaterFlow = parseFloat(Math.abs(parseFloat(device.waterFlow) + (Math.random() * 2 - 1)).toFixed(2));\n          const newPressure = parseFloat(Math.abs(parseFloat(device.pressure) + (Math.random() * 2 - 1)).toFixed(2));\n          const newTemperature = parseFloat(Math.abs(parseFloat(device.temperature) + (Math.random() * 2 - 1)).toFixed(2));\n          return {\n            ...device,\n            waterFlow: newWaterFlow,\n            pressure: newPressure,\n            temperature: newTemperature\n          };\n        });\n        fetch(\"http://localhost:5001/api/devices/bulk\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(updatedDevices)\n        }).then(res => res.json()).then(() => setDevices(updatedDevices)).catch(error => console.error(\"Error posting updated devices:\", error));\n        return updatedDevices;\n      });\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [devices]);\n\n  // --------------------------\n  // Sensor-editing dialog\n  // --------------------------\n  const handleRowClick = index => {\n    setSelectedDeviceIndex(index);\n    setOpenDialog(true);\n  };\n  const handleDialogClose = () => {\n    setOpenDialog(false);\n  };\n  const handleSliderChange = (field, newValue) => {\n    setDevices(prevDevices => prevDevices.map((device, index) => {\n      if (index === selectedDeviceIndex) {\n        return {\n          ...device,\n          [field]: parseFloat(newValue)\n        };\n      }\n      return device;\n    }));\n  };\n  const selectedDevice = selectedDeviceIndex !== null ? devices[selectedDeviceIndex] : null;\n\n  // --------------------------\n  // \"Add Device\" dialog\n  // --------------------------\n  const handleOpenAddDialog = () => {\n    setNewDevice({\n      Did: \"\",\n      waterFlow: [],\n      // Empty initial array\n      pressure: [],\n      // Empty initial array\n      temperature: [] // Empty initial array\n    });\n    setOpenAddDialog(true);\n  };\n  const handleCloseAddDialog = () => {\n    setOpenAddDialog(false);\n  };\n\n  // Function to add a new device\n  const handleAddDevice = () => {\n    // Check if all required fields are filled (assuming Did is necessary to create a new entry)\n    if (!newDevice.Did) {\n      alert(\"Please fill in all required fields.\");\n      return;\n    }\n    fetch(\"http://localhost:5001/api/devices\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newDevice)\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      console.log(\"Add device response:\", data);\n      setDevices([...devices, newDevice]); // Assuming the server returns the created device\n      handleCloseAddDialog(); // Close the dialog upon successful addition\n    }).catch(error => {\n      console.error(\"Error adding new device:\", error);\n      alert(\"Failed to add device: \" + error.message); // Optionally alert the user\n    });\n  };\n\n  /**\n   * Called whenever any field in newDevice changes.\n   * 1) Update local `newDevice`.\n   * 2) Immediately POST to the server (creating or re-creating).\n   *    - In reality, you might want to do a \"PUT / upsert\" or add a debounce.\n   */\n  const handleSubmitNewDevice = () => {\n    if (!newDevice.Did) {\n      alert(\"Device ID is required.\");\n      return;\n    }\n    fetch(\"http://localhost:5001/api/devices\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newDevice)\n    }).then(res => res.json()).then(data => {\n      console.log(\"Device added successfully:\", data);\n      setDevices(devices => [...devices, newDevice]); // Update the local state to include the new device\n      handleCloseAddDialog(); // Optionally close the dialog on success\n    }).catch(err => {\n      console.error(\"Error adding new device:\", err);\n      alert(\"Failed to add device: \" + err.message);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    sx: {\n      marginTop: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Water Management System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      sx: {\n        mb: 2\n      },\n      onClick: handleOpenAddDialog,\n      children: \"Add Device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Device ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 20\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Water Flow (L/s)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 20\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Pressure (psi)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 20\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Temperature (\\xB0C)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 20\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: devices.map((device, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n            hover: true,\n            style: {\n              cursor: \"pointer\"\n            },\n            onClick: () => handleRowClick(index),\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: device.Did\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: typeof device.waterFlow === 'number' ? device.waterFlow.toFixed(2) : 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: typeof device.pressure === 'number' ? device.pressure.toFixed(2) : 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 1\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: typeof device.temperature === 'number' ? device.temperature.toFixed(2) : 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 1\n            }, this)]\n          }, device.Did, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 9\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: handleDialogClose,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Adjust Sensor Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        dividers: true,\n        children: selectedDevice && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              children: \"Water Flow (L/s)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Slider, {\n              value: selectedDevice.waterFlow,\n              min: 0,\n              max: 500,\n              step: 1,\n              onChange: (e, val) => handleSliderChange('waterFlow', val)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [\"Current: \", selectedDevice.waterFlow.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 4\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              children: \"Pressure (psi)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Slider, {\n              value: selectedDevice.pressure,\n              min: 0,\n              max: 150,\n              step: 1,\n              onChange: (e, val) => handleSliderChange('pressure', val)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [\"Current: \", selectedDevice.pressure.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 4\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              children: \"Temperature (\\xB0C)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Slider, {\n              value: selectedDevice.temperature,\n              min: 0,\n              max: 100,\n              step: 1,\n              onChange: (e, val) => handleSliderChange('temperature', val)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [\"Current: \", selectedDevice.temperature.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleDialogClose,\n          variant: \"contained\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openAddDialog,\n      onClose: handleCloseAddDialog,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Add New Device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        dividers: true,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 2,\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Device ID\",\n            value: newDevice.Did,\n            onChange: e => handleNewDeviceFieldChange(\"Did\", e.target.value),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Water Flow (L/s)\",\n            type: \"number\",\n            value: newDevice.waterFlow,\n            onChange: e => handleNewDeviceFieldChange(\"waterFlow\", parseFloat(e.target.value) || 0),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Pressure (psi)\",\n            type: \"number\",\n            value: newDevice.pressure,\n            onChange: e => handleNewDeviceFieldChange(\"pressure\", parseFloat(e.target.value) || 0),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Temperature (\\xB0C)\",\n            type: \"number\",\n            value: newDevice.temperature,\n            onChange: e => handleNewDeviceFieldChange(\"temperature\", parseFloat(e.target.value) || 0),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseAddDialog,\n          variant: \"outlined\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleAddDevice,\n          variant: \"contained\",\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeviceAnalytics, {\n      deviceId: \"Dev-1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"O6YcAr3AMeisJ0hHG2nIdB8ukH4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Container","Typography","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Dialog","DialogTitle","DialogContent","DialogActions","Button","Slider","Box","TextField","Stack","DeviceAnalytics","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","devices","setDevices","openDialog","setOpenDialog","selectedDeviceIndex","setSelectedDeviceIndex","openAddDialog","setOpenAddDialog","newDevice","setNewDevice","Did","waterFlow","pressure","temperature","fetch","then","res","json","data","initializedDevices","map","device","parseFloat","catch","err","console","error","interval","setInterval","prevDevices","updatedDevices","newWaterFlow","Math","abs","random","toFixed","newPressure","newTemperature","method","headers","body","JSON","stringify","clearInterval","handleRowClick","index","handleDialogClose","handleSliderChange","field","newValue","selectedDevice","handleOpenAddDialog","handleCloseAddDialog","handleAddDevice","alert","response","log","message","handleSubmitNewDevice","maxWidth","sx","marginTop","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","mb","onClick","component","hover","style","cursor","open","onClose","fullWidth","dividers","mt","value","min","max","step","onChange","e","val","spacing","label","handleNewDeviceFieldChange","target","type","deviceId","_c","$RefreshReg$"],"sources":["/Users/shashank/Downloads/Reddy/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Slider,\n  Box,\n  TextField,\n  Stack,\n} from \"@mui/material\";\nimport DeviceAnalytics from \"./DeviceAnalytics\";\n\nfunction App() {\n  // Devices fetched from the DB on mount\n  const [devices, setDevices] = useState([]);\n\n  // Dialog to edit sensor data\n  const [openDialog, setOpenDialog] = useState(false);\n  const [selectedDeviceIndex, setSelectedDeviceIndex] = useState(null);\n\n  // Dialog to add a new device\n  const [openAddDialog, setOpenAddDialog] = useState(false);\n\n  const [newDevice, setNewDevice] = useState({\n    Did: \"\",\n    waterFlow: 0, // Initialize as a single number\n    pressure: 0,   // Initialize as a single number\n    temperature: 0 // Initialize as a single number\n  });\n  \n\n  /**\n   * 1) Fetch from DB on first render\n   */\n  useEffect(() => {\n    fetch(\"http://localhost:5001/api/devices\")\n      .then(res => res.json())\n      .then(data => {\n        const initializedDevices = data.map(device => ({\n          ...device,\n          waterFlow: parseFloat(device.waterFlow) || 0,  // Ensure it's a number\n          pressure: parseFloat(device.pressure) || 0,\n          temperature: parseFloat(device.temperature) || 0,\n        }));\n        setDevices(initializedDevices);\n      })\n      .catch(err => console.error(\"Error fetching devices:\", err));\n  }, []);\n  \n\n  \n  \n  /**\n   * 2) Random update effect (every second)\n   *    Remove or modify if not needed.\n   */\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDevices(prevDevices => {\n        const updatedDevices = prevDevices.map(device => {\n          const newWaterFlow = parseFloat(Math.abs(parseFloat(device.waterFlow) + (Math.random() * 2 - 1)).toFixed(2));\n          const newPressure = parseFloat(Math.abs(parseFloat(device.pressure) + (Math.random() * 2 - 1)).toFixed(2));\n          const newTemperature = parseFloat(Math.abs(parseFloat(device.temperature) + (Math.random() * 2 - 1)).toFixed(2));\n          \n          return {\n            ...device,\n            waterFlow: newWaterFlow,\n            pressure: newPressure,\n            temperature: newTemperature\n          };\n        });\n  \n        fetch(\"http://localhost:5001/api/devices/bulk\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(updatedDevices),\n        })\n        .then(res => res.json())\n        .then(() => setDevices(updatedDevices))\n        .catch(error => console.error(\"Error posting updated devices:\", error));\n  \n        return updatedDevices;\n      });\n    }, 2000);\n  \n    return () => clearInterval(interval);\n  }, [devices]);\n  \n  \n  // --------------------------\n  // Sensor-editing dialog\n  // --------------------------\n  const handleRowClick = (index) => {\n    setSelectedDeviceIndex(index);\n    setOpenDialog(true);\n  };\n\n  const handleDialogClose = () => {\n    setOpenDialog(false);\n  };\n\n  const handleSliderChange = (field, newValue) => {\n    setDevices(prevDevices => prevDevices.map((device, index) => {\n      if (index === selectedDeviceIndex) {\n        return { ...device, [field]: parseFloat(newValue) };\n      }\n      return device;\n    }));\n  };\n  \n  \n  \n  \n  \n\n  const selectedDevice =\n    selectedDeviceIndex !== null ? devices[selectedDeviceIndex] : null;\n\n  // --------------------------\n  // \"Add Device\" dialog\n  // --------------------------\n  const handleOpenAddDialog = () => {\n    setNewDevice({\n      Did: \"\",\n      waterFlow: [], // Empty initial array\n      pressure: [],  // Empty initial array\n      temperature: [] // Empty initial array\n    });\n    setOpenAddDialog(true);\n  };\n  \n  \n\n  const handleCloseAddDialog = () => {\n    setOpenAddDialog(false);\n  };\n\n  // Function to add a new device\n  const handleAddDevice = () => {\n    // Check if all required fields are filled (assuming Did is necessary to create a new entry)\n    if (!newDevice.Did) {\n      alert(\"Please fill in all required fields.\");\n      return;\n    }\n\n    fetch(\"http://localhost:5001/api/devices\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newDevice),\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        console.log(\"Add device response:\", data);\n        setDevices([...devices, newDevice]); // Assuming the server returns the created device\n        handleCloseAddDialog(); // Close the dialog upon successful addition\n      })\n      .catch((error) => {\n        console.error(\"Error adding new device:\", error);\n        alert(\"Failed to add device: \" + error.message); // Optionally alert the user\n      });\n  };\n\n  /**\n   * Called whenever any field in newDevice changes.\n   * 1) Update local `newDevice`.\n   * 2) Immediately POST to the server (creating or re-creating).\n   *    - In reality, you might want to do a \"PUT / upsert\" or add a debounce.\n   */\n  const handleSubmitNewDevice = () => {\n    if (!newDevice.Did) {\n      alert(\"Device ID is required.\");\n      return;\n    }\n  \n    fetch(\"http://localhost:5001/api/devices\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(newDevice)\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(\"Device added successfully:\", data);\n        setDevices(devices => [...devices, newDevice]); // Update the local state to include the new device\n        handleCloseAddDialog(); // Optionally close the dialog on success\n      })\n      .catch(err => {\n        console.error(\"Error adding new device:\", err);\n        alert(\"Failed to add device: \" + err.message);\n      });\n  };\n  \n  return (\n    <Container maxWidth=\"md\" sx={{ marginTop: 4 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Water Management System\n      </Typography>\n\n      {/* Button to open \"Add Device\" dialog */}\n      <Button variant=\"contained\" sx={{ mb: 2 }} onClick={handleOpenAddDialog}>\n        Add Device\n      </Button>\n\n      {/* Table of current devices */}\n      <TableContainer component={Paper}>\n  <Table>\n    <TableHead>\n      <TableRow>\n        <TableCell><strong>Device ID</strong></TableCell>\n        <TableCell><strong>Water Flow (L/s)</strong></TableCell>\n        <TableCell><strong>Pressure (psi)</strong></TableCell>\n        <TableCell><strong>Temperature (°C)</strong></TableCell>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n    {devices.map((device, index) => (\n        <TableRow\n            key={device.Did}\n            hover\n            style={{ cursor: \"pointer\" }}\n            onClick={() => handleRowClick(index)}\n        >\n            <TableCell>{device.Did}</TableCell>\n            <TableCell>{typeof device.waterFlow === 'number' ? device.waterFlow.toFixed(2) : 'N/A'}</TableCell>\n<TableCell>{typeof device.pressure === 'number' ? device.pressure.toFixed(2) : 'N/A'}</TableCell>\n<TableCell>{typeof device.temperature === 'number' ? device.temperature.toFixed(2) : 'N/A'}</TableCell>\n\n        </TableRow>\n    ))}\n</TableBody>\n\n\n  </Table>\n</TableContainer>\n\n\n      {/* Dialog for adjusting sensor data */}\n      <Dialog open={openDialog} onClose={handleDialogClose} fullWidth maxWidth=\"sm\">\n  <DialogTitle>Adjust Sensor Data</DialogTitle>\n  <DialogContent dividers>\n    {selectedDevice && (\n      <>\n        <Box sx={{ mt: 2 }}>\n          <Typography gutterBottom>Water Flow (L/s)</Typography>\n          <Slider\n            value={selectedDevice.waterFlow}\n            min={0}\n            max={500}\n            step={1}\n            onChange={(e, val) => handleSliderChange('waterFlow', val)}\n          />\n          <Typography variant=\"body2\">\n            Current: {selectedDevice.waterFlow.toFixed(2)}\n          </Typography>\n        </Box>\n\n        <Box sx={{ mt: 4 }}>\n          <Typography gutterBottom>Pressure (psi)</Typography>\n          <Slider\n            value={selectedDevice.pressure}\n            min={0}\n            max={150}\n            step={1}\n            onChange={(e, val) => handleSliderChange('pressure', val)}\n          />\n          <Typography variant=\"body2\">\n            Current: {selectedDevice.pressure.toFixed(2)}\n          </Typography>\n        </Box>\n\n        <Box sx={{ mt: 4 }}>\n          <Typography gutterBottom>Temperature (°C)</Typography>\n          <Slider\n            value={selectedDevice.temperature}\n            min={0}\n            max={100}\n            step={1}\n            onChange={(e, val) => handleSliderChange('temperature', val)}\n          />\n          <Typography variant=\"body2\">\n            Current: {selectedDevice.temperature.toFixed(2)}\n          </Typography>\n        </Box>\n      </>\n    )}\n  </DialogContent>\n  <DialogActions>\n    <Button onClick={handleDialogClose} variant=\"contained\">\n      Close\n    </Button>\n  </DialogActions>\n</Dialog>\n\n\n\n\n      {/* Dialog for ADDING a new device */}\n      <Dialog\n        open={openAddDialog}\n        onClose={handleCloseAddDialog}\n        fullWidth\n        maxWidth=\"sm\"\n      >\n        <DialogTitle>Add New Device</DialogTitle>\n        <DialogContent dividers>\n          {/* As user types, we call handleNewDeviceFieldChange immediately */}\n          <Stack spacing={2} sx={{ mt: 2 }}>\n            <TextField\n              label=\"Device ID\"\n              value={newDevice.Did}\n              onChange={(e) =>\n                handleNewDeviceFieldChange(\"Did\", e.target.value)\n              }\n              fullWidth\n            />\n            <TextField\n              label=\"Water Flow (L/s)\"\n              type=\"number\"\n              value={newDevice.waterFlow}\n              onChange={(e) =>\n                handleNewDeviceFieldChange(\n                  \"waterFlow\",\n                  parseFloat(e.target.value) || 0\n                )\n              }\n              fullWidth\n            />\n            <TextField\n              label=\"Pressure (psi)\"\n              type=\"number\"\n              value={newDevice.pressure}\n              onChange={(e) =>\n                handleNewDeviceFieldChange(\n                  \"pressure\",\n                  parseFloat(e.target.value) || 0\n                )\n              }\n              fullWidth\n            />\n            <TextField\n              label=\"Temperature (°C)\"\n              type=\"number\"\n              value={newDevice.temperature}\n              onChange={(e) =>\n                handleNewDeviceFieldChange(\n                  \"temperature\",\n                  parseFloat(e.target.value) || 0\n                )\n              }\n              fullWidth\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          {/* You can decide what \"Add\" does now—maybe just close the dialog */}\n          <Button onClick={handleCloseAddDialog} variant=\"outlined\">\n            Cancel\n          </Button>\n          <Button onClick={handleAddDevice} variant=\"contained\">\n            Done\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <DeviceAnalytics deviceId=\"Dev-1\" />\n    </Container>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}