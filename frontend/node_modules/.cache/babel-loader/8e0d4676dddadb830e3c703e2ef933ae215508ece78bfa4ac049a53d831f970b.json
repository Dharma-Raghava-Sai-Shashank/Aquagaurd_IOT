{"ast":null,"code":"var _jsxFileName = \"/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, CircularProgress } from '@mui/material';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction DeviceAnalytics({}) {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(`http://localhost:5001/api/devices/${deviceId}`);\n        const device = await response.json();\n        const labels = device.timestamps || Array.from(new Array(100), (_, index) => index); // Assuming timestamps array is available\n        const waterFlowData = device.waterFlow || [];\n        const pressureData = device.pressure || [];\n        const temperatureData = device.temperature || [];\n        const data = {\n          labels,\n          datasets: [{\n            label: 'Water Flow (L/s)',\n            data: waterFlowData,\n            borderColor: 'rgb(75, 192, 192)',\n            backgroundColor: 'rgba(75, 192, 192, 0.5)'\n          }, {\n            label: 'Pressure (psi)',\n            data: pressureData,\n            borderColor: 'rgb(255, 99, 132)',\n            backgroundColor: 'rgba(255, 99, 132, 0.5)'\n          }, {\n            label: 'Temperature (°C)',\n            data: temperatureData,\n            borderColor: 'rgb(53, 162, 235)',\n            backgroundColor: 'rgba(53, 162, 235, 0.5)'\n          }]\n        };\n        setChartData(data);\n      } catch (error) {\n        console.error(\"Error fetching device data:\", error);\n        // Handle error appropriately\n      }\n      setLoading(false);\n    };\n    fetchData();\n  }, [deviceId]); // Reacting to changes in deviceId\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 68\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: [\"Device Analytics: \", deviceId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(DeviceAnalytics, \"V8HZqSVXcumlZ/bKcun7nkuXeoI=\");\n_c = DeviceAnalytics;\nexport default DeviceAnalytics;\ndeviceId;\nvar _c;\n$RefreshReg$(_c, \"DeviceAnalytics\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","CircularProgress","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","DeviceAnalytics","_s","loading","setLoading","chartData","setChartData","fetchData","response","fetch","deviceId","device","json","labels","timestamps","Array","from","_","index","waterFlowData","waterFlow","pressureData","pressure","temperatureData","temperature","data","datasets","label","borderColor","backgroundColor","error","console","sx","display","justifyContent","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","gutterBottom","_c","$RefreshReg$"],"sources":["/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  CircularProgress\n} from '@mui/material';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nfunction DeviceAnalytics({  }) {\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(`http://localhost:5001/api/devices/${deviceId}`);\n        const device = await response.json();\n        const labels = device.timestamps || Array.from(new Array(100), (_, index) => index); // Assuming timestamps array is available\n        const waterFlowData = device.waterFlow || [];\n        const pressureData = device.pressure || [];\n        const temperatureData = device.temperature || [];\n        \n        const data = {\n          labels,\n          datasets: [\n            {\n              label: 'Water Flow (L/s)',\n              data: waterFlowData,\n              borderColor: 'rgb(75, 192, 192)',\n              backgroundColor: 'rgba(75, 192, 192, 0.5)',\n            },\n            {\n              label: 'Pressure (psi)',\n              data: pressureData,\n              borderColor: 'rgb(255, 99, 132)',\n              backgroundColor: 'rgba(255, 99, 132, 0.5)',\n            },\n            {\n              label: 'Temperature (°C)',\n              data: temperatureData,\n              borderColor: 'rgb(53, 162, 235)',\n              backgroundColor: 'rgba(53, 162, 235, 0.5)',\n            }\n          ]\n        };\n        \n        setChartData(data);\n      } catch (error) {\n        console.error(\"Error fetching device data:\", error);\n        // Handle error appropriately\n      }\n      setLoading(false);\n    };\n\n    fetchData();\n  }, [deviceId]); // Reacting to changes in deviceId\n\n  if (loading) {\n    return <Box sx={{ display: 'flex', justifyContent: 'center' }}><CircularProgress /></Box>;\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Device Analytics: {deviceId}\n      </Typography>\n      <Line data={chartData} />\n    </Box>\n  );\n}\n\nexport default DeviceAnalytics;\ndeviceId"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}