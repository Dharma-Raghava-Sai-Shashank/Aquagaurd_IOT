{"ast":null,"code":"var _jsxFileName = \"/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, CircularProgress } from '@mui/material';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction DeviceAnalytics({\n  deviceId\n}) {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    // Mock fetch function, replace with actual API call\n    const fetchData = async () => {\n      // Simulated delay and data response\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const data = {\n        labels: Array.from(new Array(24), (val, index) => index),\n        // 24 hours\n        datasets: [{\n          label: 'Water Flow (L/s)',\n          data: Array.from(new Array(24), () => Math.random() * 100),\n          borderColor: 'rgb(75, 192, 192)',\n          backgroundColor: 'rgba(75, 192, 192, 0.5)'\n        }, {\n          label: 'Pressure (psi)',\n          data: Array.from(new Array(24), () => Math.random() * 100),\n          borderColor: 'rgb(255, 99, 132)',\n          backgroundColor: 'rgba(255, 99, 132, 0.5)'\n        }, {\n          label: 'Temperature (°C)',\n          data: Array.from(new Array(24), () => Math.random() * 100),\n          borderColor: 'rgb(53, 162, 235)',\n          backgroundColor: 'rgba(53, 162, 235, 0.5)'\n        }]\n      };\n      setChartData(data);\n      setLoading(false);\n    };\n    fetchData();\n  }, [deviceId]); // Assuming a dependency on deviceId if it affects data\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: [\"Device Analytics: \", deviceId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(DeviceAnalytics, \"V8HZqSVXcumlZ/bKcun7nkuXeoI=\");\n_c = DeviceAnalytics;\nexport default DeviceAnalytics;\nvar _c;\n$RefreshReg$(_c, \"DeviceAnalytics\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","CircularProgress","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","DeviceAnalytics","deviceId","_s","loading","setLoading","chartData","setChartData","fetchData","Promise","resolve","setTimeout","data","labels","Array","from","val","index","datasets","label","Math","random","borderColor","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","children","variant","gutterBottom","_c","$RefreshReg$"],"sources":["/Users/shashank/Downloads/Reddy/frontend/src/DeviceAnalytics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  CircularProgress\n} from '@mui/material';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nfunction DeviceAnalytics({ deviceId }) {\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({});\n\n  useEffect(() => {\n    // Mock fetch function, replace with actual API call\n    const fetchData = async () => {\n      // Simulated delay and data response\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const data = {\n        labels: Array.from(new Array(24), (val, index) => index), // 24 hours\n        datasets: [\n          {\n            label: 'Water Flow (L/s)',\n            data: Array.from(new Array(24), () => Math.random() * 100),\n            borderColor: 'rgb(75, 192, 192)',\n            backgroundColor: 'rgba(75, 192, 192, 0.5)',\n          },\n          {\n            label: 'Pressure (psi)',\n            data: Array.from(new Array(24), () => Math.random() * 100),\n            borderColor: 'rgb(255, 99, 132)',\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\n          },\n          {\n            label: 'Temperature (°C)',\n            data: Array.from(new Array(24), () => Math.random() * 100),\n            borderColor: 'rgb(53, 162, 235)',\n            backgroundColor: 'rgba(53, 162, 235, 0.5)',\n          }\n        ]\n      };\n      setChartData(data);\n      setLoading(false);\n    };\n\n    fetchData();\n  }, [deviceId]); // Assuming a dependency on deviceId if it affects data\n\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Device Analytics: {deviceId}\n      </Typography>\n      <Line data={chartData} />\n    </Box>\n  );\n}\n\nexport default DeviceAnalytics;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}